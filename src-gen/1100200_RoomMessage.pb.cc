// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 1100200_RoomMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "1100200_RoomMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* RoomUserInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomUserInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomBaseInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomBaseInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoomDetailInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoomDetailInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomsUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomsUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomsDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomsDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CreateRoomDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CreateRoomDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinRoomDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinRoomDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserStateChangeDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserStateChangeDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelReadyUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelReadyUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExitRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExitRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelMatchupRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelMatchupRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupOutTimeDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupOutTimeDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupSuccessDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupSuccessDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfoUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfoUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetRoomInfoDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetRoomInfoDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickJoinRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickJoinRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickJoinRoomDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickJoinRoomDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* KickOutUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KickOutUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* FormationInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FormationInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* FightHeroUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FightHeroUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* MatchupOutTimeUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MatchupOutTimeUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserRoomUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserRoomUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserRoomDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserRoomDown_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RoomCommondIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_1100200_5fRoomMessage_2eproto() {
  protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "1100200_RoomMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RoomUserInfoBean_descriptor_ = file->message_type(0);
  static const int RoomUserInfoBean_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUserInfoBean, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUserInfoBean, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUserInfoBean, heroid_),
  };
  RoomUserInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomUserInfoBean_descriptor_,
      RoomUserInfoBean::default_instance_,
      RoomUserInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUserInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomUserInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomUserInfoBean));
  RoomBaseInfoBean_descriptor_ = file->message_type(1);
  static const int RoomBaseInfoBean_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfoBean, roomid_),
  };
  RoomBaseInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomBaseInfoBean_descriptor_,
      RoomBaseInfoBean::default_instance_,
      RoomBaseInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomBaseInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomBaseInfoBean));
  RoomDetailInfoBean_descriptor_ = file->message_type(2);
  static const int RoomDetailInfoBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, masterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, roomuserinfobean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, battleinfobean_),
  };
  RoomDetailInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoomDetailInfoBean_descriptor_,
      RoomDetailInfoBean::default_instance_,
      RoomDetailInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoomDetailInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoomDetailInfoBean));
  BattleInfoBean_descriptor_ = file->message_type(3);
  static const int BattleInfoBean_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, battleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, attackroomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, defineroomid_),
  };
  BattleInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfoBean_descriptor_,
      BattleInfoBean::default_instance_,
      BattleInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfoBean));
  GetRoomsUp_descriptor_ = file->message_type(4);
  static const int GetRoomsUp_offsets_[1] = {
  };
  GetRoomsUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomsUp_descriptor_,
      GetRoomsUp::default_instance_,
      GetRoomsUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomsUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomsUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomsUp));
  GetRoomsDown_descriptor_ = file->message_type(5);
  static const int GetRoomsDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomsDown, roombaseinfobean_),
  };
  GetRoomsDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomsDown_descriptor_,
      GetRoomsDown::default_instance_,
      GetRoomsDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomsDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomsDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomsDown));
  CreateRoomUp_descriptor_ = file->message_type(6);
  static const int CreateRoomUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomUp, battlekeyid_),
  };
  CreateRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomUp_descriptor_,
      CreateRoomUp::default_instance_,
      CreateRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomUp));
  CreateRoomDown_descriptor_ = file->message_type(7);
  static const int CreateRoomDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomDown, roomid_),
  };
  CreateRoomDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CreateRoomDown_descriptor_,
      CreateRoomDown::default_instance_,
      CreateRoomDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CreateRoomDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CreateRoomDown));
  JoinRoomUp_descriptor_ = file->message_type(8);
  static const int JoinRoomUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUp, roomid_),
  };
  JoinRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinRoomUp_descriptor_,
      JoinRoomUp::default_instance_,
      JoinRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinRoomUp));
  JoinRoomDown_descriptor_ = file->message_type(9);
  static const int JoinRoomDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomDown, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomDown, roomdetailinfobean_),
  };
  JoinRoomDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinRoomDown_descriptor_,
      JoinRoomDown::default_instance_,
      JoinRoomDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinRoomDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinRoomDown));
  UserStateChangeDown_descriptor_ = file->message_type(10);
  static const int UserStateChangeDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStateChangeDown, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStateChangeDown, state_),
  };
  UserStateChangeDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserStateChangeDown_descriptor_,
      UserStateChangeDown::default_instance_,
      UserStateChangeDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStateChangeDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserStateChangeDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserStateChangeDown));
  ReadyUp_descriptor_ = file->message_type(11);
  static const int ReadyUp_offsets_[1] = {
  };
  ReadyUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyUp_descriptor_,
      ReadyUp::default_instance_,
      ReadyUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyUp));
  CancelReadyUp_descriptor_ = file->message_type(12);
  static const int CancelReadyUp_offsets_[1] = {
  };
  CancelReadyUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelReadyUp_descriptor_,
      CancelReadyUp::default_instance_,
      CancelReadyUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReadyUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelReadyUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelReadyUp));
  ExitRoomUp_descriptor_ = file->message_type(13);
  static const int ExitRoomUp_offsets_[1] = {
  };
  ExitRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExitRoomUp_descriptor_,
      ExitRoomUp::default_instance_,
      ExitRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExitRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExitRoomUp));
  MatchupRoomUp_descriptor_ = file->message_type(14);
  static const int MatchupRoomUp_offsets_[1] = {
  };
  MatchupRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupRoomUp_descriptor_,
      MatchupRoomUp::default_instance_,
      MatchupRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupRoomUp));
  CancelMatchupRoomUp_descriptor_ = file->message_type(15);
  static const int CancelMatchupRoomUp_offsets_[1] = {
  };
  CancelMatchupRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelMatchupRoomUp_descriptor_,
      CancelMatchupRoomUp::default_instance_,
      CancelMatchupRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelMatchupRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelMatchupRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelMatchupRoomUp));
  MatchupOutTimeDown_descriptor_ = file->message_type(16);
  static const int MatchupOutTimeDown_offsets_[1] = {
  };
  MatchupOutTimeDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupOutTimeDown_descriptor_,
      MatchupOutTimeDown::default_instance_,
      MatchupOutTimeDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupOutTimeDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupOutTimeDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupOutTimeDown));
  MatchupSuccessDown_descriptor_ = file->message_type(17);
  static const int MatchupSuccessDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupSuccessDown, battleinfobean_),
  };
  MatchupSuccessDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupSuccessDown_descriptor_,
      MatchupSuccessDown::default_instance_,
      MatchupSuccessDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupSuccessDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupSuccessDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupSuccessDown));
  GetRoomInfoUp_descriptor_ = file->message_type(18);
  static const int GetRoomInfoUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoUp, rid_),
  };
  GetRoomInfoUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfoUp_descriptor_,
      GetRoomInfoUp::default_instance_,
      GetRoomInfoUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfoUp));
  GetRoomInfoDown_descriptor_ = file->message_type(19);
  static const int GetRoomInfoDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoDown, roomdetailinfobean_),
  };
  GetRoomInfoDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetRoomInfoDown_descriptor_,
      GetRoomInfoDown::default_instance_,
      GetRoomInfoDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetRoomInfoDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetRoomInfoDown));
  QuickJoinRoomUp_descriptor_ = file->message_type(20);
  static const int QuickJoinRoomUp_offsets_[1] = {
  };
  QuickJoinRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickJoinRoomUp_descriptor_,
      QuickJoinRoomUp::default_instance_,
      QuickJoinRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickJoinRoomUp));
  QuickJoinRoomDown_descriptor_ = file->message_type(21);
  static const int QuickJoinRoomDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRoomDown, roomdetailinfobean_),
  };
  QuickJoinRoomDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickJoinRoomDown_descriptor_,
      QuickJoinRoomDown::default_instance_,
      QuickJoinRoomDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRoomDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickJoinRoomDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickJoinRoomDown));
  KickOutUp_descriptor_ = file->message_type(22);
  static const int KickOutUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutUp, kickoutuserid_),
  };
  KickOutUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KickOutUp_descriptor_,
      KickOutUp::default_instance_,
      KickOutUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KickOutUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KickOutUp));
  FormationInfoBean_descriptor_ = file->message_type(23);
  static const int FormationInfoBean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationInfoBean, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationInfoBean, retinueid_),
  };
  FormationInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FormationInfoBean_descriptor_,
      FormationInfoBean::default_instance_,
      FormationInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FormationInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FormationInfoBean));
  FightHeroUp_descriptor_ = file->message_type(24);
  static const int FightHeroUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroUp, formationinfobean_),
  };
  FightHeroUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FightHeroUp_descriptor_,
      FightHeroUp::default_instance_,
      FightHeroUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FightHeroUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FightHeroUp));
  MatchupOutTimeUp_descriptor_ = file->message_type(25);
  static const int MatchupOutTimeUp_offsets_[1] = {
  };
  MatchupOutTimeUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MatchupOutTimeUp_descriptor_,
      MatchupOutTimeUp::default_instance_,
      MatchupOutTimeUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupOutTimeUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MatchupOutTimeUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MatchupOutTimeUp));
  GetUserRoomUp_descriptor_ = file->message_type(26);
  static const int GetUserRoomUp_offsets_[1] = {
  };
  GetUserRoomUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserRoomUp_descriptor_,
      GetUserRoomUp::default_instance_,
      GetUserRoomUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserRoomUp));
  GetUserRoomDown_descriptor_ = file->message_type(27);
  static const int GetUserRoomDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomDown, isroom_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomDown, roomdetailinfobean_),
  };
  GetUserRoomDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserRoomDown_descriptor_,
      GetUserRoomDown::default_instance_,
      GetUserRoomDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserRoomDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserRoomDown));
  RoomCommondIdEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_1100200_5fRoomMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomUserInfoBean_descriptor_, &RoomUserInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomBaseInfoBean_descriptor_, &RoomBaseInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoomDetailInfoBean_descriptor_, &RoomDetailInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfoBean_descriptor_, &BattleInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomsUp_descriptor_, &GetRoomsUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomsDown_descriptor_, &GetRoomsDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomUp_descriptor_, &CreateRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CreateRoomDown_descriptor_, &CreateRoomDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinRoomUp_descriptor_, &JoinRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinRoomDown_descriptor_, &JoinRoomDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserStateChangeDown_descriptor_, &UserStateChangeDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyUp_descriptor_, &ReadyUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelReadyUp_descriptor_, &CancelReadyUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExitRoomUp_descriptor_, &ExitRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupRoomUp_descriptor_, &MatchupRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelMatchupRoomUp_descriptor_, &CancelMatchupRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupOutTimeDown_descriptor_, &MatchupOutTimeDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupSuccessDown_descriptor_, &MatchupSuccessDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfoUp_descriptor_, &GetRoomInfoUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetRoomInfoDown_descriptor_, &GetRoomInfoDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickJoinRoomUp_descriptor_, &QuickJoinRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickJoinRoomDown_descriptor_, &QuickJoinRoomDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KickOutUp_descriptor_, &KickOutUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FormationInfoBean_descriptor_, &FormationInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FightHeroUp_descriptor_, &FightHeroUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MatchupOutTimeUp_descriptor_, &MatchupOutTimeUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserRoomUp_descriptor_, &GetUserRoomUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserRoomDown_descriptor_, &GetUserRoomDown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_1100200_5fRoomMessage_2eproto() {
  delete RoomUserInfoBean::default_instance_;
  delete RoomUserInfoBean_reflection_;
  delete RoomBaseInfoBean::default_instance_;
  delete RoomBaseInfoBean_reflection_;
  delete RoomDetailInfoBean::default_instance_;
  delete RoomDetailInfoBean_reflection_;
  delete BattleInfoBean::default_instance_;
  delete BattleInfoBean_reflection_;
  delete GetRoomsUp::default_instance_;
  delete GetRoomsUp_reflection_;
  delete GetRoomsDown::default_instance_;
  delete GetRoomsDown_reflection_;
  delete CreateRoomUp::default_instance_;
  delete CreateRoomUp_reflection_;
  delete CreateRoomDown::default_instance_;
  delete CreateRoomDown_reflection_;
  delete JoinRoomUp::default_instance_;
  delete JoinRoomUp_reflection_;
  delete JoinRoomDown::default_instance_;
  delete JoinRoomDown_reflection_;
  delete UserStateChangeDown::default_instance_;
  delete UserStateChangeDown_reflection_;
  delete ReadyUp::default_instance_;
  delete ReadyUp_reflection_;
  delete CancelReadyUp::default_instance_;
  delete CancelReadyUp_reflection_;
  delete ExitRoomUp::default_instance_;
  delete ExitRoomUp_reflection_;
  delete MatchupRoomUp::default_instance_;
  delete MatchupRoomUp_reflection_;
  delete CancelMatchupRoomUp::default_instance_;
  delete CancelMatchupRoomUp_reflection_;
  delete MatchupOutTimeDown::default_instance_;
  delete MatchupOutTimeDown_reflection_;
  delete MatchupSuccessDown::default_instance_;
  delete MatchupSuccessDown_reflection_;
  delete GetRoomInfoUp::default_instance_;
  delete GetRoomInfoUp_reflection_;
  delete GetRoomInfoDown::default_instance_;
  delete GetRoomInfoDown_reflection_;
  delete QuickJoinRoomUp::default_instance_;
  delete QuickJoinRoomUp_reflection_;
  delete QuickJoinRoomDown::default_instance_;
  delete QuickJoinRoomDown_reflection_;
  delete KickOutUp::default_instance_;
  delete KickOutUp_reflection_;
  delete FormationInfoBean::default_instance_;
  delete FormationInfoBean_reflection_;
  delete FightHeroUp::default_instance_;
  delete FightHeroUp_reflection_;
  delete MatchupOutTimeUp::default_instance_;
  delete MatchupOutTimeUp_reflection_;
  delete GetUserRoomUp::default_instance_;
  delete GetUserRoomUp_reflection_;
  delete GetUserRoomDown::default_instance_;
  delete GetUserRoomDown_reflection_;
}

void protobuf_AddDesc_1100200_5fRoomMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\0311100200_RoomMessage.proto\"A\n\020RoomUserI"
    "nfoBean\022\016\n\006userId\030\001 \002(\t\022\r\n\005state\030\002 \002(\r\022\016"
    "\n\006heroId\030\003 \003(\r\"\"\n\020RoomBaseInfoBean\022\016\n\006ro"
    "omId\030\001 \002(\r\"\233\001\n\022RoomDetailInfoBean\022\016\n\006roo"
    "mId\030\001 \002(\r\022\020\n\010masterId\030\002 \002(\t\022\r\n\005state\030\003 \002"
    "(\r\022+\n\020roomUserInfoBean\030\004 \003(\0132\021.RoomUserI"
    "nfoBean\022\'\n\016battleInfoBean\030\005 \001(\0132\017.Battle"
    "InfoBean\"h\n\016BattleInfoBean\022\n\n\002ip\030\001 \002(\t\022\014"
    "\n\004port\030\002 \002(\r\022\020\n\010battleId\030\003 \002(\t\022\024\n\014attack"
    "Roomid\030\004 \002(\r\022\024\n\014defineRoomid\030\005 \002(\r\"\014\n\nGe"
    "tRoomsUp\";\n\014GetRoomsDown\022+\n\020roomBaseInfo"
    "Bean\030\001 \003(\0132\021.RoomBaseInfoBean\"#\n\014CreateR"
    "oomUp\022\023\n\013battleKeyId\030\001 \002(\r\" \n\016CreateRoom"
    "Down\022\016\n\006roomId\030\001 \002(\r\"\034\n\nJoinRoomUp\022\016\n\006ro"
    "omId\030\001 \002(\r\"R\n\014JoinRoomDown\022\021\n\tisSuccess\030"
    "\001 \002(\010\022/\n\022roomDetailInfoBean\030\002 \001(\0132\023.Room"
    "DetailInfoBean\"4\n\023UserStateChangeDown\022\016\n"
    "\006userId\030\001 \002(\t\022\r\n\005state\030\002 \002(\r\"\t\n\007ReadyUp\""
    "\017\n\rCancelReadyUp\"\014\n\nExitRoomUp\"\017\n\rMatchu"
    "pRoomUp\"\025\n\023CancelMatchupRoomUp\"\024\n\022Matchu"
    "pOutTimeDown\"=\n\022MatchupSuccessDown\022\'\n\016ba"
    "ttleInfoBean\030\001 \002(\0132\017.BattleInfoBean\"\034\n\rG"
    "etRoomInfoUp\022\013\n\003rid\030\001 \002(\r\"B\n\017GetRoomInfo"
    "Down\022/\n\022roomDetailInfoBean\030\001 \002(\0132\023.RoomD"
    "etailInfoBean\"\021\n\017QuickJoinRoomUp\"D\n\021Quic"
    "kJoinRoomDown\022/\n\022roomDetailInfoBean\030\001 \002("
    "\0132\023.RoomDetailInfoBean\"\"\n\tKickOutUp\022\025\n\rk"
    "ickOutUserId\030\001 \002(\t\"6\n\021FormationInfoBean\022"
    "\016\n\006heroId\030\001 \002(\r\022\021\n\tretinueId\030\002 \002(\r\"<\n\013Fi"
    "ghtHeroUp\022-\n\021formationInfoBean\030\001 \003(\0132\022.F"
    "ormationInfoBean\"\022\n\020MatchupOutTimeUp\"\017\n\r"
    "GetUserRoomUp\"R\n\017GetUserRoomDown\022\016\n\006isRo"
    "om\030\001 \002(\010\022/\n\022roomDetailInfoBean\030\002 \001(\0132\023.R"
    "oomDetailInfoBean*\232\004\n\021RoomCommondIdEnum\022"
    "\021\n\013_GetRoomsUp\020\251\223C\022\023\n\r_GetRoomsDown\020\252\223C\022"
    "\023\n\r_CreateRoomUp\020\253\223C\022\025\n\017_CreateRoomDown\020"
    "\254\223C\022\021\n\013_JoinRoomUp\020\255\223C\022\023\n\r_JoinRoomDown\020"
    "\256\223C\022\032\n\024_UserStateChangeDown\020\260\223C\022\016\n\010_Read"
    "yUp\020\261\223C\022\024\n\016_CancelReadyUp\020\263\223C\022\021\n\013_ExitRo"
    "omUp\020\265\223C\022\024\n\016_MatchupRoomUp\020\267\223C\022\033\n\024_Cance"
    "lMatchupRoomUp\020\267\302\237\005\022\031\n\023_MatchupOutTimeDo"
    "wn\020\272\223C\022\031\n\023_MatchupSuccessDown\020\274\223C\022\024\n\016_Ge"
    "tRoomInfoUp\020\275\223C\022\026\n\020_GetRoomInfoDown\020\276\223C\022"
    "\026\n\020_QuickJoinRoomUp\020\277\223C\022\030\n\022_QuickJoinRoo"
    "mDown\020\300\223C\022\020\n\n_KickOutUp\020\301\223C\022\022\n\014_FightHer"
    "oUp\020\303\223C\022\027\n\021_MatchupOutTimeUp\020\305\223C\022\024\n\016_Get"
    "UserRoomUp\020\307\223C\022\026\n\020_GetUserRoomDown\020\310\223CB\036"
    "\n\017com.cwa.messageB\013RoomMessage", 1910);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "1100200_RoomMessage.proto", &protobuf_RegisterTypes);
  RoomUserInfoBean::default_instance_ = new RoomUserInfoBean();
  RoomBaseInfoBean::default_instance_ = new RoomBaseInfoBean();
  RoomDetailInfoBean::default_instance_ = new RoomDetailInfoBean();
  BattleInfoBean::default_instance_ = new BattleInfoBean();
  GetRoomsUp::default_instance_ = new GetRoomsUp();
  GetRoomsDown::default_instance_ = new GetRoomsDown();
  CreateRoomUp::default_instance_ = new CreateRoomUp();
  CreateRoomDown::default_instance_ = new CreateRoomDown();
  JoinRoomUp::default_instance_ = new JoinRoomUp();
  JoinRoomDown::default_instance_ = new JoinRoomDown();
  UserStateChangeDown::default_instance_ = new UserStateChangeDown();
  ReadyUp::default_instance_ = new ReadyUp();
  CancelReadyUp::default_instance_ = new CancelReadyUp();
  ExitRoomUp::default_instance_ = new ExitRoomUp();
  MatchupRoomUp::default_instance_ = new MatchupRoomUp();
  CancelMatchupRoomUp::default_instance_ = new CancelMatchupRoomUp();
  MatchupOutTimeDown::default_instance_ = new MatchupOutTimeDown();
  MatchupSuccessDown::default_instance_ = new MatchupSuccessDown();
  GetRoomInfoUp::default_instance_ = new GetRoomInfoUp();
  GetRoomInfoDown::default_instance_ = new GetRoomInfoDown();
  QuickJoinRoomUp::default_instance_ = new QuickJoinRoomUp();
  QuickJoinRoomDown::default_instance_ = new QuickJoinRoomDown();
  KickOutUp::default_instance_ = new KickOutUp();
  FormationInfoBean::default_instance_ = new FormationInfoBean();
  FightHeroUp::default_instance_ = new FightHeroUp();
  MatchupOutTimeUp::default_instance_ = new MatchupOutTimeUp();
  GetUserRoomUp::default_instance_ = new GetUserRoomUp();
  GetUserRoomDown::default_instance_ = new GetUserRoomDown();
  RoomUserInfoBean::default_instance_->InitAsDefaultInstance();
  RoomBaseInfoBean::default_instance_->InitAsDefaultInstance();
  RoomDetailInfoBean::default_instance_->InitAsDefaultInstance();
  BattleInfoBean::default_instance_->InitAsDefaultInstance();
  GetRoomsUp::default_instance_->InitAsDefaultInstance();
  GetRoomsDown::default_instance_->InitAsDefaultInstance();
  CreateRoomUp::default_instance_->InitAsDefaultInstance();
  CreateRoomDown::default_instance_->InitAsDefaultInstance();
  JoinRoomUp::default_instance_->InitAsDefaultInstance();
  JoinRoomDown::default_instance_->InitAsDefaultInstance();
  UserStateChangeDown::default_instance_->InitAsDefaultInstance();
  ReadyUp::default_instance_->InitAsDefaultInstance();
  CancelReadyUp::default_instance_->InitAsDefaultInstance();
  ExitRoomUp::default_instance_->InitAsDefaultInstance();
  MatchupRoomUp::default_instance_->InitAsDefaultInstance();
  CancelMatchupRoomUp::default_instance_->InitAsDefaultInstance();
  MatchupOutTimeDown::default_instance_->InitAsDefaultInstance();
  MatchupSuccessDown::default_instance_->InitAsDefaultInstance();
  GetRoomInfoUp::default_instance_->InitAsDefaultInstance();
  GetRoomInfoDown::default_instance_->InitAsDefaultInstance();
  QuickJoinRoomUp::default_instance_->InitAsDefaultInstance();
  QuickJoinRoomDown::default_instance_->InitAsDefaultInstance();
  KickOutUp::default_instance_->InitAsDefaultInstance();
  FormationInfoBean::default_instance_->InitAsDefaultInstance();
  FightHeroUp::default_instance_->InitAsDefaultInstance();
  MatchupOutTimeUp::default_instance_->InitAsDefaultInstance();
  GetUserRoomUp::default_instance_->InitAsDefaultInstance();
  GetUserRoomDown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_1100200_5fRoomMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_1100200_5fRoomMessage_2eproto {
  StaticDescriptorInitializer_1100200_5fRoomMessage_2eproto() {
    protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  }
} static_descriptor_initializer_1100200_5fRoomMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* RoomCommondIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomCommondIdEnum_descriptor_;
}
bool RoomCommondIdEnum_IsValid(int value) {
  switch(value) {
    case 1100201:
    case 1100202:
    case 1100203:
    case 1100204:
    case 1100205:
    case 1100206:
    case 1100208:
    case 1100209:
    case 1100211:
    case 1100213:
    case 1100215:
    case 1100218:
    case 1100220:
    case 1100221:
    case 1100222:
    case 1100223:
    case 1100224:
    case 1100225:
    case 1100227:
    case 1100229:
    case 1100231:
    case 1100232:
    case 11002167:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int RoomUserInfoBean::kUserIdFieldNumber;
const int RoomUserInfoBean::kStateFieldNumber;
const int RoomUserInfoBean::kHeroIdFieldNumber;
#endif  // !_MSC_VER

RoomUserInfoBean::RoomUserInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomUserInfoBean::InitAsDefaultInstance() {
}

RoomUserInfoBean::RoomUserInfoBean(const RoomUserInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomUserInfoBean::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomUserInfoBean::~RoomUserInfoBean() {
  SharedDtor();
}

void RoomUserInfoBean::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void RoomUserInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomUserInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomUserInfoBean_descriptor_;
}

const RoomUserInfoBean& RoomUserInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

RoomUserInfoBean* RoomUserInfoBean::default_instance_ = NULL;

RoomUserInfoBean* RoomUserInfoBean::New() const {
  return new RoomUserInfoBean;
}

void RoomUserInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    state_ = 0u;
  }
  heroid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomUserInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        break;
      }

      // repeated uint32 heroId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_heroid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_heroid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_heroId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomUserInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  // repeated uint32 heroId = 3;
  for (int i = 0; i < this->heroid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->heroid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomUserInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  // repeated uint32 heroId = 3;
  for (int i = 0; i < this->heroid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->heroid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomUserInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  // repeated uint32 heroId = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->heroid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->heroid(i));
    }
    total_size += 1 * this->heroid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomUserInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomUserInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomUserInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomUserInfoBean::MergeFrom(const RoomUserInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  heroid_.MergeFrom(from.heroid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomUserInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomUserInfoBean::CopyFrom(const RoomUserInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomUserInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RoomUserInfoBean::Swap(RoomUserInfoBean* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(state_, other->state_);
    heroid_.Swap(&other->heroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomUserInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomUserInfoBean_descriptor_;
  metadata.reflection = RoomUserInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomBaseInfoBean::kRoomIdFieldNumber;
#endif  // !_MSC_VER

RoomBaseInfoBean::RoomBaseInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomBaseInfoBean::InitAsDefaultInstance() {
}

RoomBaseInfoBean::RoomBaseInfoBean(const RoomBaseInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomBaseInfoBean::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomBaseInfoBean::~RoomBaseInfoBean() {
  SharedDtor();
}

void RoomBaseInfoBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoomBaseInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomBaseInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomBaseInfoBean_descriptor_;
}

const RoomBaseInfoBean& RoomBaseInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

RoomBaseInfoBean* RoomBaseInfoBean::default_instance_ = NULL;

RoomBaseInfoBean* RoomBaseInfoBean::New() const {
  return new RoomBaseInfoBean;
}

void RoomBaseInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomBaseInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomBaseInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomBaseInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomBaseInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomBaseInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomBaseInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomBaseInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomBaseInfoBean::MergeFrom(const RoomBaseInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomBaseInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomBaseInfoBean::CopyFrom(const RoomBaseInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomBaseInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RoomBaseInfoBean::Swap(RoomBaseInfoBean* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomBaseInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomBaseInfoBean_descriptor_;
  metadata.reflection = RoomBaseInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoomDetailInfoBean::kRoomIdFieldNumber;
const int RoomDetailInfoBean::kMasterIdFieldNumber;
const int RoomDetailInfoBean::kStateFieldNumber;
const int RoomDetailInfoBean::kRoomUserInfoBeanFieldNumber;
const int RoomDetailInfoBean::kBattleInfoBeanFieldNumber;
#endif  // !_MSC_VER

RoomDetailInfoBean::RoomDetailInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RoomDetailInfoBean::InitAsDefaultInstance() {
  battleinfobean_ = const_cast< ::BattleInfoBean*>(&::BattleInfoBean::default_instance());
}

RoomDetailInfoBean::RoomDetailInfoBean(const RoomDetailInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RoomDetailInfoBean::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0u;
  masterid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  battleinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoomDetailInfoBean::~RoomDetailInfoBean() {
  SharedDtor();
}

void RoomDetailInfoBean::SharedDtor() {
  if (masterid_ != &::google::protobuf::internal::kEmptyString) {
    delete masterid_;
  }
  if (this != default_instance_) {
    delete battleinfobean_;
  }
}

void RoomDetailInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoomDetailInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoomDetailInfoBean_descriptor_;
}

const RoomDetailInfoBean& RoomDetailInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

RoomDetailInfoBean* RoomDetailInfoBean::default_instance_ = NULL;

RoomDetailInfoBean* RoomDetailInfoBean::New() const {
  return new RoomDetailInfoBean;
}

void RoomDetailInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0u;
    if (has_masterid()) {
      if (masterid_ != &::google::protobuf::internal::kEmptyString) {
        masterid_->clear();
      }
    }
    state_ = 0u;
    if (has_battleinfobean()) {
      if (battleinfobean_ != NULL) battleinfobean_->::BattleInfoBean::Clear();
    }
  }
  roomuserinfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoomDetailInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_masterId;
        break;
      }

      // required string masterId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_masterId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_masterid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->masterid().data(), this->masterid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required uint32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomUserInfoBean;
        break;
      }

      // repeated .RoomUserInfoBean roomUserInfoBean = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomUserInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roomuserinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_roomUserInfoBean;
        if (input->ExpectTag(42)) goto parse_battleInfoBean;
        break;
      }

      // optional .BattleInfoBean battleInfoBean = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RoomDetailInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  // required string masterId = 2;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterid().data(), this->masterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->masterid(), output);
  }

  // required uint32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->state(), output);
  }

  // repeated .RoomUserInfoBean roomUserInfoBean = 4;
  for (int i = 0; i < this->roomuserinfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roomuserinfobean(i), output);
  }

  // optional .BattleInfoBean battleInfoBean = 5;
  if (has_battleinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->battleinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RoomDetailInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  // required string masterId = 2;
  if (has_masterid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->masterid().data(), this->masterid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->masterid(), target);
  }

  // required uint32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->state(), target);
  }

  // repeated .RoomUserInfoBean roomUserInfoBean = 4;
  for (int i = 0; i < this->roomuserinfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roomuserinfobean(i), target);
  }

  // optional .BattleInfoBean battleInfoBean = 5;
  if (has_battleinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->battleinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RoomDetailInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

    // required string masterId = 2;
    if (has_masterid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->masterid());
    }

    // required uint32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

    // optional .BattleInfoBean battleInfoBean = 5;
    if (has_battleinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfobean());
    }

  }
  // repeated .RoomUserInfoBean roomUserInfoBean = 4;
  total_size += 1 * this->roomuserinfobean_size();
  for (int i = 0; i < this->roomuserinfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roomuserinfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoomDetailInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoomDetailInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoomDetailInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoomDetailInfoBean::MergeFrom(const RoomDetailInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  roomuserinfobean_.MergeFrom(from.roomuserinfobean_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_masterid()) {
      set_masterid(from.masterid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_battleinfobean()) {
      mutable_battleinfobean()->::BattleInfoBean::MergeFrom(from.battleinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoomDetailInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoomDetailInfoBean::CopyFrom(const RoomDetailInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoomDetailInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < roomuserinfobean_size(); i++) {
    if (!this->roomuserinfobean(i).IsInitialized()) return false;
  }
  if (has_battleinfobean()) {
    if (!this->battleinfobean().IsInitialized()) return false;
  }
  return true;
}

void RoomDetailInfoBean::Swap(RoomDetailInfoBean* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(masterid_, other->masterid_);
    std::swap(state_, other->state_);
    roomuserinfobean_.Swap(&other->roomuserinfobean_);
    std::swap(battleinfobean_, other->battleinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoomDetailInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoomDetailInfoBean_descriptor_;
  metadata.reflection = RoomDetailInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInfoBean::kIpFieldNumber;
const int BattleInfoBean::kPortFieldNumber;
const int BattleInfoBean::kBattleIdFieldNumber;
const int BattleInfoBean::kAttackRoomidFieldNumber;
const int BattleInfoBean::kDefineRoomidFieldNumber;
#endif  // !_MSC_VER

BattleInfoBean::BattleInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfoBean::InitAsDefaultInstance() {
}

BattleInfoBean::BattleInfoBean(const BattleInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfoBean::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  battleid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  attackroomid_ = 0u;
  defineroomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfoBean::~BattleInfoBean() {
  SharedDtor();
}

void BattleInfoBean::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (battleid_ != &::google::protobuf::internal::kEmptyString) {
    delete battleid_;
  }
  if (this != default_instance_) {
  }
}

void BattleInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfoBean_descriptor_;
}

const BattleInfoBean& BattleInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

BattleInfoBean* BattleInfoBean::default_instance_ = NULL;

BattleInfoBean* BattleInfoBean::New() const {
  return new BattleInfoBean;
}

void BattleInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    if (has_battleid()) {
      if (battleid_ != &::google::protobuf::internal::kEmptyString) {
        battleid_->clear();
      }
    }
    attackroomid_ = 0u;
    defineroomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // required uint32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleId;
        break;
      }

      // required string battleId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_battleid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->battleid().data(), this->battleid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attackRoomid;
        break;
      }

      // required uint32 attackRoomid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackRoomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &attackroomid_)));
          set_has_attackroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_defineRoomid;
        break;
      }

      // required uint32 defineRoomid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_defineRoomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &defineroomid_)));
          set_has_defineroomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }

  // required uint32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // required string battleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->battleid(), output);
  }

  // required uint32 attackRoomid = 4;
  if (has_attackroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->attackroomid(), output);
  }

  // required uint32 defineRoomid = 5;
  if (has_defineroomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->defineroomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // required uint32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->port(), target);
  }

  // required string battleId = 3;
  if (has_battleid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->battleid().data(), this->battleid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->battleid(), target);
  }

  // required uint32 attackRoomid = 4;
  if (has_attackroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->attackroomid(), target);
  }

  // required uint32 defineRoomid = 5;
  if (has_defineroomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->defineroomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required uint32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // required string battleId = 3;
    if (has_battleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->battleid());
    }

    // required uint32 attackRoomid = 4;
    if (has_attackroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->attackroomid());
    }

    // required uint32 defineRoomid = 5;
    if (has_defineroomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->defineroomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInfoBean::MergeFrom(const BattleInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_battleid()) {
      set_battleid(from.battleid());
    }
    if (from.has_attackroomid()) {
      set_attackroomid(from.attackroomid());
    }
    if (from.has_defineroomid()) {
      set_defineroomid(from.defineroomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInfoBean::CopyFrom(const BattleInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void BattleInfoBean::Swap(BattleInfoBean* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(battleid_, other->battleid_);
    std::swap(attackroomid_, other->attackroomid_);
    std::swap(defineroomid_, other->defineroomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfoBean_descriptor_;
  metadata.reflection = BattleInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetRoomsUp::GetRoomsUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomsUp::InitAsDefaultInstance() {
}

GetRoomsUp::GetRoomsUp(const GetRoomsUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomsUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomsUp::~GetRoomsUp() {
  SharedDtor();
}

void GetRoomsUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomsUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomsUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomsUp_descriptor_;
}

const GetRoomsUp& GetRoomsUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetRoomsUp* GetRoomsUp::default_instance_ = NULL;

GetRoomsUp* GetRoomsUp::New() const {
  return new GetRoomsUp;
}

void GetRoomsUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomsUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetRoomsUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomsUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomsUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomsUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomsUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomsUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomsUp::MergeFrom(const GetRoomsUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomsUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomsUp::CopyFrom(const GetRoomsUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomsUp::IsInitialized() const {

  return true;
}

void GetRoomsUp::Swap(GetRoomsUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomsUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomsUp_descriptor_;
  metadata.reflection = GetRoomsUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomsDown::kRoomBaseInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetRoomsDown::GetRoomsDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomsDown::InitAsDefaultInstance() {
}

GetRoomsDown::GetRoomsDown(const GetRoomsDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomsDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomsDown::~GetRoomsDown() {
  SharedDtor();
}

void GetRoomsDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomsDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomsDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomsDown_descriptor_;
}

const GetRoomsDown& GetRoomsDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetRoomsDown* GetRoomsDown::default_instance_ = NULL;

GetRoomsDown* GetRoomsDown::New() const {
  return new GetRoomsDown;
}

void GetRoomsDown::Clear() {
  roombaseinfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomsDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RoomBaseInfoBean roomBaseInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomBaseInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roombaseinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_roomBaseInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomsDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RoomBaseInfoBean roomBaseInfoBean = 1;
  for (int i = 0; i < this->roombaseinfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roombaseinfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomsDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RoomBaseInfoBean roomBaseInfoBean = 1;
  for (int i = 0; i < this->roombaseinfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roombaseinfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomsDown::ByteSize() const {
  int total_size = 0;

  // repeated .RoomBaseInfoBean roomBaseInfoBean = 1;
  total_size += 1 * this->roombaseinfobean_size();
  for (int i = 0; i < this->roombaseinfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roombaseinfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomsDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomsDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomsDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomsDown::MergeFrom(const GetRoomsDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  roombaseinfobean_.MergeFrom(from.roombaseinfobean_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomsDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomsDown::CopyFrom(const GetRoomsDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomsDown::IsInitialized() const {

  for (int i = 0; i < roombaseinfobean_size(); i++) {
    if (!this->roombaseinfobean(i).IsInitialized()) return false;
  }
  return true;
}

void GetRoomsDown::Swap(GetRoomsDown* other) {
  if (other != this) {
    roombaseinfobean_.Swap(&other->roombaseinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomsDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomsDown_descriptor_;
  metadata.reflection = GetRoomsDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomUp::kBattleKeyIdFieldNumber;
#endif  // !_MSC_VER

CreateRoomUp::CreateRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomUp::InitAsDefaultInstance() {
}

CreateRoomUp::CreateRoomUp(const CreateRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomUp::SharedCtor() {
  _cached_size_ = 0;
  battlekeyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomUp::~CreateRoomUp() {
  SharedDtor();
}

void CreateRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomUp_descriptor_;
}

const CreateRoomUp& CreateRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

CreateRoomUp* CreateRoomUp::default_instance_ = NULL;

CreateRoomUp* CreateRoomUp::New() const {
  return new CreateRoomUp;
}

void CreateRoomUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battlekeyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 battleKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlekeyid_)));
          set_has_battlekeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 battleKeyId = 1;
  if (has_battlekeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->battlekeyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 battleKeyId = 1;
  if (has_battlekeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->battlekeyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 battleKeyId = 1;
    if (has_battlekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlekeyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomUp::MergeFrom(const CreateRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battlekeyid()) {
      set_battlekeyid(from.battlekeyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomUp::CopyFrom(const CreateRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateRoomUp::Swap(CreateRoomUp* other) {
  if (other != this) {
    std::swap(battlekeyid_, other->battlekeyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomUp_descriptor_;
  metadata.reflection = CreateRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CreateRoomDown::kRoomIdFieldNumber;
#endif  // !_MSC_VER

CreateRoomDown::CreateRoomDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CreateRoomDown::InitAsDefaultInstance() {
}

CreateRoomDown::CreateRoomDown(const CreateRoomDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CreateRoomDown::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CreateRoomDown::~CreateRoomDown() {
  SharedDtor();
}

void CreateRoomDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CreateRoomDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CreateRoomDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CreateRoomDown_descriptor_;
}

const CreateRoomDown& CreateRoomDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

CreateRoomDown* CreateRoomDown::default_instance_ = NULL;

CreateRoomDown* CreateRoomDown::New() const {
  return new CreateRoomDown;
}

void CreateRoomDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CreateRoomDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CreateRoomDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CreateRoomDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CreateRoomDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateRoomDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CreateRoomDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CreateRoomDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CreateRoomDown::MergeFrom(const CreateRoomDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CreateRoomDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateRoomDown::CopyFrom(const CreateRoomDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateRoomDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CreateRoomDown::Swap(CreateRoomDown* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CreateRoomDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CreateRoomDown_descriptor_;
  metadata.reflection = CreateRoomDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinRoomUp::kRoomIdFieldNumber;
#endif  // !_MSC_VER

JoinRoomUp::JoinRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinRoomUp::InitAsDefaultInstance() {
}

JoinRoomUp::JoinRoomUp(const JoinRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinRoomUp::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinRoomUp::~JoinRoomUp() {
  SharedDtor();
}

void JoinRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JoinRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomUp_descriptor_;
}

const JoinRoomUp& JoinRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

JoinRoomUp* JoinRoomUp::default_instance_ = NULL;

JoinRoomUp* JoinRoomUp::New() const {
  return new JoinRoomUp;
}

void JoinRoomUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 roomId = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinRoomUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 roomId = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinRoomUp::MergeFrom(const JoinRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomUp::CopyFrom(const JoinRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinRoomUp::Swap(JoinRoomUp* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomUp_descriptor_;
  metadata.reflection = JoinRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinRoomDown::kIsSuccessFieldNumber;
const int JoinRoomDown::kRoomDetailInfoBeanFieldNumber;
#endif  // !_MSC_VER

JoinRoomDown::JoinRoomDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinRoomDown::InitAsDefaultInstance() {
  roomdetailinfobean_ = const_cast< ::RoomDetailInfoBean*>(&::RoomDetailInfoBean::default_instance());
}

JoinRoomDown::JoinRoomDown(const JoinRoomDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinRoomDown::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  roomdetailinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinRoomDown::~JoinRoomDown() {
  SharedDtor();
}

void JoinRoomDown::SharedDtor() {
  if (this != default_instance_) {
    delete roomdetailinfobean_;
  }
}

void JoinRoomDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinRoomDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinRoomDown_descriptor_;
}

const JoinRoomDown& JoinRoomDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

JoinRoomDown* JoinRoomDown::default_instance_ = NULL;

JoinRoomDown* JoinRoomDown::New() const {
  return new JoinRoomDown;
}

void JoinRoomDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    if (has_roomdetailinfobean()) {
      if (roomdetailinfobean_ != NULL) roomdetailinfobean_->::RoomDetailInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinRoomDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomDetailInfoBean;
        break;
      }

      // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomDetailInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdetailinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinRoomDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
  if (has_roomdetailinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomdetailinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinRoomDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
  if (has_roomdetailinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomdetailinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinRoomDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
    if (has_roomdetailinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdetailinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinRoomDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinRoomDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinRoomDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinRoomDown::MergeFrom(const JoinRoomDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_roomdetailinfobean()) {
      mutable_roomdetailinfobean()->::RoomDetailInfoBean::MergeFrom(from.roomdetailinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinRoomDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinRoomDown::CopyFrom(const JoinRoomDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinRoomDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomdetailinfobean()) {
    if (!this->roomdetailinfobean().IsInitialized()) return false;
  }
  return true;
}

void JoinRoomDown::Swap(JoinRoomDown* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(roomdetailinfobean_, other->roomdetailinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinRoomDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinRoomDown_descriptor_;
  metadata.reflection = JoinRoomDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserStateChangeDown::kUserIdFieldNumber;
const int UserStateChangeDown::kStateFieldNumber;
#endif  // !_MSC_VER

UserStateChangeDown::UserStateChangeDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserStateChangeDown::InitAsDefaultInstance() {
}

UserStateChangeDown::UserStateChangeDown(const UserStateChangeDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserStateChangeDown::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  state_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserStateChangeDown::~UserStateChangeDown() {
  SharedDtor();
}

void UserStateChangeDown::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void UserStateChangeDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserStateChangeDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserStateChangeDown_descriptor_;
}

const UserStateChangeDown& UserStateChangeDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

UserStateChangeDown* UserStateChangeDown::default_instance_ = NULL;

UserStateChangeDown* UserStateChangeDown::New() const {
  return new UserStateChangeDown;
}

void UserStateChangeDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    state_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserStateChangeDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required uint32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserStateChangeDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required uint32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserStateChangeDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required uint32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserStateChangeDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserStateChangeDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserStateChangeDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserStateChangeDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserStateChangeDown::MergeFrom(const UserStateChangeDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserStateChangeDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserStateChangeDown::CopyFrom(const UserStateChangeDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserStateChangeDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserStateChangeDown::Swap(UserStateChangeDown* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserStateChangeDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserStateChangeDown_descriptor_;
  metadata.reflection = UserStateChangeDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReadyUp::ReadyUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyUp::InitAsDefaultInstance() {
}

ReadyUp::ReadyUp(const ReadyUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyUp::~ReadyUp() {
  SharedDtor();
}

void ReadyUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyUp_descriptor_;
}

const ReadyUp& ReadyUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

ReadyUp* ReadyUp::default_instance_ = NULL;

ReadyUp* ReadyUp::New() const {
  return new ReadyUp;
}

void ReadyUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyUp::MergeFrom(const ReadyUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyUp::CopyFrom(const ReadyUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyUp::IsInitialized() const {

  return true;
}

void ReadyUp::Swap(ReadyUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyUp_descriptor_;
  metadata.reflection = ReadyUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CancelReadyUp::CancelReadyUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelReadyUp::InitAsDefaultInstance() {
}

CancelReadyUp::CancelReadyUp(const CancelReadyUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelReadyUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelReadyUp::~CancelReadyUp() {
  SharedDtor();
}

void CancelReadyUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelReadyUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelReadyUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelReadyUp_descriptor_;
}

const CancelReadyUp& CancelReadyUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

CancelReadyUp* CancelReadyUp::default_instance_ = NULL;

CancelReadyUp* CancelReadyUp::New() const {
  return new CancelReadyUp;
}

void CancelReadyUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelReadyUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CancelReadyUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelReadyUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelReadyUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelReadyUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelReadyUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelReadyUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelReadyUp::MergeFrom(const CancelReadyUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelReadyUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelReadyUp::CopyFrom(const CancelReadyUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelReadyUp::IsInitialized() const {

  return true;
}

void CancelReadyUp::Swap(CancelReadyUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelReadyUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelReadyUp_descriptor_;
  metadata.reflection = CancelReadyUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ExitRoomUp::ExitRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExitRoomUp::InitAsDefaultInstance() {
}

ExitRoomUp::ExitRoomUp(const ExitRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExitRoomUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExitRoomUp::~ExitRoomUp() {
  SharedDtor();
}

void ExitRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExitRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExitRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExitRoomUp_descriptor_;
}

const ExitRoomUp& ExitRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

ExitRoomUp* ExitRoomUp::default_instance_ = NULL;

ExitRoomUp* ExitRoomUp::New() const {
  return new ExitRoomUp;
}

void ExitRoomUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExitRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ExitRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExitRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExitRoomUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExitRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExitRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExitRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExitRoomUp::MergeFrom(const ExitRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExitRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExitRoomUp::CopyFrom(const ExitRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExitRoomUp::IsInitialized() const {

  return true;
}

void ExitRoomUp::Swap(ExitRoomUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExitRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExitRoomUp_descriptor_;
  metadata.reflection = ExitRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchupRoomUp::MatchupRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupRoomUp::InitAsDefaultInstance() {
}

MatchupRoomUp::MatchupRoomUp(const MatchupRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupRoomUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupRoomUp::~MatchupRoomUp() {
  SharedDtor();
}

void MatchupRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchupRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupRoomUp_descriptor_;
}

const MatchupRoomUp& MatchupRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

MatchupRoomUp* MatchupRoomUp::default_instance_ = NULL;

MatchupRoomUp* MatchupRoomUp::New() const {
  return new MatchupRoomUp;
}

void MatchupRoomUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchupRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupRoomUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupRoomUp::MergeFrom(const MatchupRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupRoomUp::CopyFrom(const MatchupRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupRoomUp::IsInitialized() const {

  return true;
}

void MatchupRoomUp::Swap(MatchupRoomUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupRoomUp_descriptor_;
  metadata.reflection = MatchupRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CancelMatchupRoomUp::CancelMatchupRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelMatchupRoomUp::InitAsDefaultInstance() {
}

CancelMatchupRoomUp::CancelMatchupRoomUp(const CancelMatchupRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelMatchupRoomUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelMatchupRoomUp::~CancelMatchupRoomUp() {
  SharedDtor();
}

void CancelMatchupRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelMatchupRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelMatchupRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelMatchupRoomUp_descriptor_;
}

const CancelMatchupRoomUp& CancelMatchupRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

CancelMatchupRoomUp* CancelMatchupRoomUp::default_instance_ = NULL;

CancelMatchupRoomUp* CancelMatchupRoomUp::New() const {
  return new CancelMatchupRoomUp;
}

void CancelMatchupRoomUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelMatchupRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CancelMatchupRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelMatchupRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelMatchupRoomUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelMatchupRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelMatchupRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelMatchupRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelMatchupRoomUp::MergeFrom(const CancelMatchupRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelMatchupRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelMatchupRoomUp::CopyFrom(const CancelMatchupRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelMatchupRoomUp::IsInitialized() const {

  return true;
}

void CancelMatchupRoomUp::Swap(CancelMatchupRoomUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelMatchupRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelMatchupRoomUp_descriptor_;
  metadata.reflection = CancelMatchupRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchupOutTimeDown::MatchupOutTimeDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupOutTimeDown::InitAsDefaultInstance() {
}

MatchupOutTimeDown::MatchupOutTimeDown(const MatchupOutTimeDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupOutTimeDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupOutTimeDown::~MatchupOutTimeDown() {
  SharedDtor();
}

void MatchupOutTimeDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchupOutTimeDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupOutTimeDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupOutTimeDown_descriptor_;
}

const MatchupOutTimeDown& MatchupOutTimeDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

MatchupOutTimeDown* MatchupOutTimeDown::default_instance_ = NULL;

MatchupOutTimeDown* MatchupOutTimeDown::New() const {
  return new MatchupOutTimeDown;
}

void MatchupOutTimeDown::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupOutTimeDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchupOutTimeDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupOutTimeDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupOutTimeDown::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupOutTimeDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupOutTimeDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupOutTimeDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupOutTimeDown::MergeFrom(const MatchupOutTimeDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupOutTimeDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupOutTimeDown::CopyFrom(const MatchupOutTimeDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupOutTimeDown::IsInitialized() const {

  return true;
}

void MatchupOutTimeDown::Swap(MatchupOutTimeDown* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupOutTimeDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupOutTimeDown_descriptor_;
  metadata.reflection = MatchupOutTimeDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MatchupSuccessDown::kBattleInfoBeanFieldNumber;
#endif  // !_MSC_VER

MatchupSuccessDown::MatchupSuccessDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupSuccessDown::InitAsDefaultInstance() {
  battleinfobean_ = const_cast< ::BattleInfoBean*>(&::BattleInfoBean::default_instance());
}

MatchupSuccessDown::MatchupSuccessDown(const MatchupSuccessDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupSuccessDown::SharedCtor() {
  _cached_size_ = 0;
  battleinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupSuccessDown::~MatchupSuccessDown() {
  SharedDtor();
}

void MatchupSuccessDown::SharedDtor() {
  if (this != default_instance_) {
    delete battleinfobean_;
  }
}

void MatchupSuccessDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupSuccessDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupSuccessDown_descriptor_;
}

const MatchupSuccessDown& MatchupSuccessDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

MatchupSuccessDown* MatchupSuccessDown::default_instance_ = NULL;

MatchupSuccessDown* MatchupSuccessDown::New() const {
  return new MatchupSuccessDown;
}

void MatchupSuccessDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_battleinfobean()) {
      if (battleinfobean_ != NULL) battleinfobean_->::BattleInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupSuccessDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .BattleInfoBean battleInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MatchupSuccessDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .BattleInfoBean battleInfoBean = 1;
  if (has_battleinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->battleinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupSuccessDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .BattleInfoBean battleInfoBean = 1;
  if (has_battleinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->battleinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupSuccessDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .BattleInfoBean battleInfoBean = 1;
    if (has_battleinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupSuccessDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupSuccessDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupSuccessDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupSuccessDown::MergeFrom(const MatchupSuccessDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battleinfobean()) {
      mutable_battleinfobean()->::BattleInfoBean::MergeFrom(from.battleinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupSuccessDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupSuccessDown::CopyFrom(const MatchupSuccessDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupSuccessDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_battleinfobean()) {
    if (!this->battleinfobean().IsInitialized()) return false;
  }
  return true;
}

void MatchupSuccessDown::Swap(MatchupSuccessDown* other) {
  if (other != this) {
    std::swap(battleinfobean_, other->battleinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupSuccessDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupSuccessDown_descriptor_;
  metadata.reflection = MatchupSuccessDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoUp::kRidFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoUp::GetRoomInfoUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfoUp::InitAsDefaultInstance() {
}

GetRoomInfoUp::GetRoomInfoUp(const GetRoomInfoUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfoUp::SharedCtor() {
  _cached_size_ = 0;
  rid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoUp::~GetRoomInfoUp() {
  SharedDtor();
}

void GetRoomInfoUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetRoomInfoUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfoUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfoUp_descriptor_;
}

const GetRoomInfoUp& GetRoomInfoUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetRoomInfoUp* GetRoomInfoUp::default_instance_ = NULL;

GetRoomInfoUp* GetRoomInfoUp::New() const {
  return new GetRoomInfoUp;
}

void GetRoomInfoUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfoUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfoUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 rid = 1;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfoUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 rid = 1;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfoUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rid = 1;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfoUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfoUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfoUp::MergeFrom(const GetRoomInfoUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rid()) {
      set_rid(from.rid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfoUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfoUp::CopyFrom(const GetRoomInfoUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetRoomInfoUp::Swap(GetRoomInfoUp* other) {
  if (other != this) {
    std::swap(rid_, other->rid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfoUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfoUp_descriptor_;
  metadata.reflection = GetRoomInfoUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetRoomInfoDown::kRoomDetailInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetRoomInfoDown::GetRoomInfoDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetRoomInfoDown::InitAsDefaultInstance() {
  roomdetailinfobean_ = const_cast< ::RoomDetailInfoBean*>(&::RoomDetailInfoBean::default_instance());
}

GetRoomInfoDown::GetRoomInfoDown(const GetRoomInfoDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetRoomInfoDown::SharedCtor() {
  _cached_size_ = 0;
  roomdetailinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetRoomInfoDown::~GetRoomInfoDown() {
  SharedDtor();
}

void GetRoomInfoDown::SharedDtor() {
  if (this != default_instance_) {
    delete roomdetailinfobean_;
  }
}

void GetRoomInfoDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetRoomInfoDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetRoomInfoDown_descriptor_;
}

const GetRoomInfoDown& GetRoomInfoDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetRoomInfoDown* GetRoomInfoDown::default_instance_ = NULL;

GetRoomInfoDown* GetRoomInfoDown::New() const {
  return new GetRoomInfoDown;
}

void GetRoomInfoDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomdetailinfobean()) {
      if (roomdetailinfobean_ != NULL) roomdetailinfobean_->::RoomDetailInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetRoomInfoDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoomDetailInfoBean roomDetailInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdetailinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetRoomInfoDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RoomDetailInfoBean roomDetailInfoBean = 1;
  if (has_roomdetailinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomdetailinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetRoomInfoDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RoomDetailInfoBean roomDetailInfoBean = 1;
  if (has_roomdetailinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomdetailinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetRoomInfoDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RoomDetailInfoBean roomDetailInfoBean = 1;
    if (has_roomdetailinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdetailinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetRoomInfoDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetRoomInfoDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetRoomInfoDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetRoomInfoDown::MergeFrom(const GetRoomInfoDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomdetailinfobean()) {
      mutable_roomdetailinfobean()->::RoomDetailInfoBean::MergeFrom(from.roomdetailinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetRoomInfoDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetRoomInfoDown::CopyFrom(const GetRoomInfoDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetRoomInfoDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomdetailinfobean()) {
    if (!this->roomdetailinfobean().IsInitialized()) return false;
  }
  return true;
}

void GetRoomInfoDown::Swap(GetRoomInfoDown* other) {
  if (other != this) {
    std::swap(roomdetailinfobean_, other->roomdetailinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetRoomInfoDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetRoomInfoDown_descriptor_;
  metadata.reflection = GetRoomInfoDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

QuickJoinRoomUp::QuickJoinRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickJoinRoomUp::InitAsDefaultInstance() {
}

QuickJoinRoomUp::QuickJoinRoomUp(const QuickJoinRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickJoinRoomUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickJoinRoomUp::~QuickJoinRoomUp() {
  SharedDtor();
}

void QuickJoinRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickJoinRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickJoinRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickJoinRoomUp_descriptor_;
}

const QuickJoinRoomUp& QuickJoinRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

QuickJoinRoomUp* QuickJoinRoomUp::default_instance_ = NULL;

QuickJoinRoomUp* QuickJoinRoomUp::New() const {
  return new QuickJoinRoomUp;
}

void QuickJoinRoomUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickJoinRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void QuickJoinRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickJoinRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickJoinRoomUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickJoinRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickJoinRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickJoinRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickJoinRoomUp::MergeFrom(const QuickJoinRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickJoinRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickJoinRoomUp::CopyFrom(const QuickJoinRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickJoinRoomUp::IsInitialized() const {

  return true;
}

void QuickJoinRoomUp::Swap(QuickJoinRoomUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickJoinRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickJoinRoomUp_descriptor_;
  metadata.reflection = QuickJoinRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickJoinRoomDown::kRoomDetailInfoBeanFieldNumber;
#endif  // !_MSC_VER

QuickJoinRoomDown::QuickJoinRoomDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickJoinRoomDown::InitAsDefaultInstance() {
  roomdetailinfobean_ = const_cast< ::RoomDetailInfoBean*>(&::RoomDetailInfoBean::default_instance());
}

QuickJoinRoomDown::QuickJoinRoomDown(const QuickJoinRoomDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickJoinRoomDown::SharedCtor() {
  _cached_size_ = 0;
  roomdetailinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickJoinRoomDown::~QuickJoinRoomDown() {
  SharedDtor();
}

void QuickJoinRoomDown::SharedDtor() {
  if (this != default_instance_) {
    delete roomdetailinfobean_;
  }
}

void QuickJoinRoomDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickJoinRoomDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickJoinRoomDown_descriptor_;
}

const QuickJoinRoomDown& QuickJoinRoomDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

QuickJoinRoomDown* QuickJoinRoomDown::default_instance_ = NULL;

QuickJoinRoomDown* QuickJoinRoomDown::New() const {
  return new QuickJoinRoomDown;
}

void QuickJoinRoomDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_roomdetailinfobean()) {
      if (roomdetailinfobean_ != NULL) roomdetailinfobean_->::RoomDetailInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickJoinRoomDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RoomDetailInfoBean roomDetailInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdetailinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickJoinRoomDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .RoomDetailInfoBean roomDetailInfoBean = 1;
  if (has_roomdetailinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->roomdetailinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickJoinRoomDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .RoomDetailInfoBean roomDetailInfoBean = 1;
  if (has_roomdetailinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->roomdetailinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickJoinRoomDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .RoomDetailInfoBean roomDetailInfoBean = 1;
    if (has_roomdetailinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdetailinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickJoinRoomDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickJoinRoomDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickJoinRoomDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickJoinRoomDown::MergeFrom(const QuickJoinRoomDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomdetailinfobean()) {
      mutable_roomdetailinfobean()->::RoomDetailInfoBean::MergeFrom(from.roomdetailinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickJoinRoomDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickJoinRoomDown::CopyFrom(const QuickJoinRoomDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickJoinRoomDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomdetailinfobean()) {
    if (!this->roomdetailinfobean().IsInitialized()) return false;
  }
  return true;
}

void QuickJoinRoomDown::Swap(QuickJoinRoomDown* other) {
  if (other != this) {
    std::swap(roomdetailinfobean_, other->roomdetailinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickJoinRoomDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickJoinRoomDown_descriptor_;
  metadata.reflection = QuickJoinRoomDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KickOutUp::kKickOutUserIdFieldNumber;
#endif  // !_MSC_VER

KickOutUp::KickOutUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KickOutUp::InitAsDefaultInstance() {
}

KickOutUp::KickOutUp(const KickOutUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KickOutUp::SharedCtor() {
  _cached_size_ = 0;
  kickoutuserid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KickOutUp::~KickOutUp() {
  SharedDtor();
}

void KickOutUp::SharedDtor() {
  if (kickoutuserid_ != &::google::protobuf::internal::kEmptyString) {
    delete kickoutuserid_;
  }
  if (this != default_instance_) {
  }
}

void KickOutUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KickOutUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KickOutUp_descriptor_;
}

const KickOutUp& KickOutUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

KickOutUp* KickOutUp::default_instance_ = NULL;

KickOutUp* KickOutUp::New() const {
  return new KickOutUp;
}

void KickOutUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_kickoutuserid()) {
      if (kickoutuserid_ != &::google::protobuf::internal::kEmptyString) {
        kickoutuserid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KickOutUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string kickOutUserId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kickoutuserid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->kickoutuserid().data(), this->kickoutuserid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KickOutUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string kickOutUserId = 1;
  if (has_kickoutuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickoutuserid().data(), this->kickoutuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->kickoutuserid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KickOutUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string kickOutUserId = 1;
  if (has_kickoutuserid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->kickoutuserid().data(), this->kickoutuserid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kickoutuserid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KickOutUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string kickOutUserId = 1;
    if (has_kickoutuserid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->kickoutuserid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KickOutUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KickOutUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KickOutUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KickOutUp::MergeFrom(const KickOutUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kickoutuserid()) {
      set_kickoutuserid(from.kickoutuserid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KickOutUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KickOutUp::CopyFrom(const KickOutUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KickOutUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KickOutUp::Swap(KickOutUp* other) {
  if (other != this) {
    std::swap(kickoutuserid_, other->kickoutuserid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KickOutUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KickOutUp_descriptor_;
  metadata.reflection = KickOutUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FormationInfoBean::kHeroIdFieldNumber;
const int FormationInfoBean::kRetinueIdFieldNumber;
#endif  // !_MSC_VER

FormationInfoBean::FormationInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FormationInfoBean::InitAsDefaultInstance() {
}

FormationInfoBean::FormationInfoBean(const FormationInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FormationInfoBean::SharedCtor() {
  _cached_size_ = 0;
  heroid_ = 0u;
  retinueid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FormationInfoBean::~FormationInfoBean() {
  SharedDtor();
}

void FormationInfoBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FormationInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FormationInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FormationInfoBean_descriptor_;
}

const FormationInfoBean& FormationInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

FormationInfoBean* FormationInfoBean::default_instance_ = NULL;

FormationInfoBean* FormationInfoBean::New() const {
  return new FormationInfoBean;
}

void FormationInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    heroid_ = 0u;
    retinueid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FormationInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retinueId;
        break;
      }

      // required uint32 retinueId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retinueId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &retinueid_)));
          set_has_retinueid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FormationInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroId = 1;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heroid(), output);
  }

  // required uint32 retinueId = 2;
  if (has_retinueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->retinueid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FormationInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroId = 1;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heroid(), target);
  }

  // required uint32 retinueId = 2;
  if (has_retinueid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->retinueid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FormationInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroId = 1;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // required uint32 retinueId = 2;
    if (has_retinueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->retinueid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FormationInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FormationInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FormationInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FormationInfoBean::MergeFrom(const FormationInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_retinueid()) {
      set_retinueid(from.retinueid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FormationInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FormationInfoBean::CopyFrom(const FormationInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FormationInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FormationInfoBean::Swap(FormationInfoBean* other) {
  if (other != this) {
    std::swap(heroid_, other->heroid_);
    std::swap(retinueid_, other->retinueid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FormationInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FormationInfoBean_descriptor_;
  metadata.reflection = FormationInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FightHeroUp::kFormationInfoBeanFieldNumber;
#endif  // !_MSC_VER

FightHeroUp::FightHeroUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FightHeroUp::InitAsDefaultInstance() {
}

FightHeroUp::FightHeroUp(const FightHeroUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FightHeroUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FightHeroUp::~FightHeroUp() {
  SharedDtor();
}

void FightHeroUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FightHeroUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FightHeroUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FightHeroUp_descriptor_;
}

const FightHeroUp& FightHeroUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

FightHeroUp* FightHeroUp::default_instance_ = NULL;

FightHeroUp* FightHeroUp::New() const {
  return new FightHeroUp;
}

void FightHeroUp::Clear() {
  formationinfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FightHeroUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FormationInfoBean formationInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_formationInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_formationinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_formationInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FightHeroUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FormationInfoBean formationInfoBean = 1;
  for (int i = 0; i < this->formationinfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->formationinfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FightHeroUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FormationInfoBean formationInfoBean = 1;
  for (int i = 0; i < this->formationinfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->formationinfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FightHeroUp::ByteSize() const {
  int total_size = 0;

  // repeated .FormationInfoBean formationInfoBean = 1;
  total_size += 1 * this->formationinfobean_size();
  for (int i = 0; i < this->formationinfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->formationinfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FightHeroUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FightHeroUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FightHeroUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FightHeroUp::MergeFrom(const FightHeroUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  formationinfobean_.MergeFrom(from.formationinfobean_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FightHeroUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FightHeroUp::CopyFrom(const FightHeroUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FightHeroUp::IsInitialized() const {

  for (int i = 0; i < formationinfobean_size(); i++) {
    if (!this->formationinfobean(i).IsInitialized()) return false;
  }
  return true;
}

void FightHeroUp::Swap(FightHeroUp* other) {
  if (other != this) {
    formationinfobean_.Swap(&other->formationinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FightHeroUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FightHeroUp_descriptor_;
  metadata.reflection = FightHeroUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

MatchupOutTimeUp::MatchupOutTimeUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MatchupOutTimeUp::InitAsDefaultInstance() {
}

MatchupOutTimeUp::MatchupOutTimeUp(const MatchupOutTimeUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MatchupOutTimeUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MatchupOutTimeUp::~MatchupOutTimeUp() {
  SharedDtor();
}

void MatchupOutTimeUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MatchupOutTimeUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MatchupOutTimeUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MatchupOutTimeUp_descriptor_;
}

const MatchupOutTimeUp& MatchupOutTimeUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

MatchupOutTimeUp* MatchupOutTimeUp::default_instance_ = NULL;

MatchupOutTimeUp* MatchupOutTimeUp::New() const {
  return new MatchupOutTimeUp;
}

void MatchupOutTimeUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MatchupOutTimeUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void MatchupOutTimeUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MatchupOutTimeUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MatchupOutTimeUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchupOutTimeUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MatchupOutTimeUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MatchupOutTimeUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MatchupOutTimeUp::MergeFrom(const MatchupOutTimeUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MatchupOutTimeUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MatchupOutTimeUp::CopyFrom(const MatchupOutTimeUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchupOutTimeUp::IsInitialized() const {

  return true;
}

void MatchupOutTimeUp::Swap(MatchupOutTimeUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MatchupOutTimeUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MatchupOutTimeUp_descriptor_;
  metadata.reflection = MatchupOutTimeUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetUserRoomUp::GetUserRoomUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserRoomUp::InitAsDefaultInstance() {
}

GetUserRoomUp::GetUserRoomUp(const GetUserRoomUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserRoomUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserRoomUp::~GetUserRoomUp() {
  SharedDtor();
}

void GetUserRoomUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetUserRoomUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserRoomUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserRoomUp_descriptor_;
}

const GetUserRoomUp& GetUserRoomUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetUserRoomUp* GetUserRoomUp::default_instance_ = NULL;

GetUserRoomUp* GetUserRoomUp::New() const {
  return new GetUserRoomUp;
}

void GetUserRoomUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserRoomUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetUserRoomUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserRoomUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserRoomUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserRoomUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserRoomUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserRoomUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserRoomUp::MergeFrom(const GetUserRoomUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserRoomUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRoomUp::CopyFrom(const GetUserRoomUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRoomUp::IsInitialized() const {

  return true;
}

void GetUserRoomUp::Swap(GetUserRoomUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserRoomUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserRoomUp_descriptor_;
  metadata.reflection = GetUserRoomUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserRoomDown::kIsRoomFieldNumber;
const int GetUserRoomDown::kRoomDetailInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetUserRoomDown::GetUserRoomDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserRoomDown::InitAsDefaultInstance() {
  roomdetailinfobean_ = const_cast< ::RoomDetailInfoBean*>(&::RoomDetailInfoBean::default_instance());
}

GetUserRoomDown::GetUserRoomDown(const GetUserRoomDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserRoomDown::SharedCtor() {
  _cached_size_ = 0;
  isroom_ = false;
  roomdetailinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserRoomDown::~GetUserRoomDown() {
  SharedDtor();
}

void GetUserRoomDown::SharedDtor() {
  if (this != default_instance_) {
    delete roomdetailinfobean_;
  }
}

void GetUserRoomDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserRoomDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserRoomDown_descriptor_;
}

const GetUserRoomDown& GetUserRoomDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100200_5fRoomMessage_2eproto();
  return *default_instance_;
}

GetUserRoomDown* GetUserRoomDown::default_instance_ = NULL;

GetUserRoomDown* GetUserRoomDown::New() const {
  return new GetUserRoomDown;
}

void GetUserRoomDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isroom_ = false;
    if (has_roomdetailinfobean()) {
      if (roomdetailinfobean_ != NULL) roomdetailinfobean_->::RoomDetailInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserRoomDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isRoom = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isroom_)));
          set_has_isroom();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roomDetailInfoBean;
        break;
      }

      // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roomDetailInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_roomdetailinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserRoomDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool isRoom = 1;
  if (has_isroom()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isroom(), output);
  }

  // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
  if (has_roomdetailinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roomdetailinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserRoomDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool isRoom = 1;
  if (has_isroom()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isroom(), target);
  }

  // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
  if (has_roomdetailinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roomdetailinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserRoomDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isRoom = 1;
    if (has_isroom()) {
      total_size += 1 + 1;
    }

    // optional .RoomDetailInfoBean roomDetailInfoBean = 2;
    if (has_roomdetailinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roomdetailinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserRoomDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserRoomDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserRoomDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserRoomDown::MergeFrom(const GetUserRoomDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isroom()) {
      set_isroom(from.isroom());
    }
    if (from.has_roomdetailinfobean()) {
      mutable_roomdetailinfobean()->::RoomDetailInfoBean::MergeFrom(from.roomdetailinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserRoomDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserRoomDown::CopyFrom(const GetUserRoomDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserRoomDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_roomdetailinfobean()) {
    if (!this->roomdetailinfobean().IsInitialized()) return false;
  }
  return true;
}

void GetUserRoomDown::Swap(GetUserRoomDown* other) {
  if (other != this) {
    std::swap(isroom_, other->isroom_);
    std::swap(roomdetailinfobean_, other->roomdetailinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserRoomDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserRoomDown_descriptor_;
  metadata.reflection = GetUserRoomDown_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
