// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 1100000_UserMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "1100000_UserMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* UserIdBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserIdBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLoginDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLoginDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserLogoutUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserLogoutUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserinfoUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserinfoUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetUserinfoDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetUserinfoDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserNameUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserNameUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserIconUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserIconUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChangeUserStateUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeUserStateUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* UserCommondIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_1100000_5fUserMessage_2eproto() {
  protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "1100000_UserMessage.proto");
  GOOGLE_CHECK(file != NULL);
  UserIdBean_descriptor_ = file->message_type(0);
  static const int UserIdBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, level_),
  };
  UserIdBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserIdBean_descriptor_,
      UserIdBean::default_instance_,
      UserIdBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserIdBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserIdBean));
  UserInfoBean_descriptor_ = file->message_type(1);
  static const int UserInfoBean_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, icon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, modifynamecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, eventstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, functionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, lucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, currentstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, buypowercount_),
  };
  UserInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfoBean_descriptor_,
      UserInfoBean::default_instance_,
      UserInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfoBean));
  UserLoginUp_descriptor_ = file->message_type(2);
  static const int UserLoginUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, token_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, useridstr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, asid_),
  };
  UserLoginUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginUp_descriptor_,
      UserLoginUp::default_instance_,
      UserLoginUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginUp));
  UserLoginDown_descriptor_ = file->message_type(3);
  static const int UserLoginDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginDown, loginstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginDown, logouttime_),
  };
  UserLoginDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLoginDown_descriptor_,
      UserLoginDown::default_instance_,
      UserLoginDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLoginDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLoginDown));
  UserLogoutUp_descriptor_ = file->message_type(4);
  static const int UserLogoutUp_offsets_[1] = {
  };
  UserLogoutUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserLogoutUp_descriptor_,
      UserLogoutUp::default_instance_,
      UserLogoutUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserLogoutUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserLogoutUp));
  GetUserinfoUp_descriptor_ = file->message_type(5);
  static const int GetUserinfoUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoUp, userid_),
  };
  GetUserinfoUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserinfoUp_descriptor_,
      GetUserinfoUp::default_instance_,
      GetUserinfoUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserinfoUp));
  GetUserinfoDown_descriptor_ = file->message_type(6);
  static const int GetUserinfoDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoDown, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoDown, userinfobean_),
  };
  GetUserinfoDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetUserinfoDown_descriptor_,
      GetUserinfoDown::default_instance_,
      GetUserinfoDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetUserinfoDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetUserinfoDown));
  ChangeUserNameUp_descriptor_ = file->message_type(7);
  static const int ChangeUserNameUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserNameUp, username_),
  };
  ChangeUserNameUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserNameUp_descriptor_,
      ChangeUserNameUp::default_instance_,
      ChangeUserNameUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserNameUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserNameUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserNameUp));
  ChangeUserIconUp_descriptor_ = file->message_type(8);
  static const int ChangeUserIconUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserIconUp, icon_),
  };
  ChangeUserIconUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserIconUp_descriptor_,
      ChangeUserIconUp::default_instance_,
      ChangeUserIconUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserIconUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserIconUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserIconUp));
  ChangeUserStateUp_descriptor_ = file->message_type(9);
  static const int ChangeUserStateUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStateUp, eventstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStateUp, functionstate_),
  };
  ChangeUserStateUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeUserStateUp_descriptor_,
      ChangeUserStateUp::default_instance_,
      ChangeUserStateUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStateUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeUserStateUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeUserStateUp));
  UserCommondIdEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_1100000_5fUserMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserIdBean_descriptor_, &UserIdBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfoBean_descriptor_, &UserInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginUp_descriptor_, &UserLoginUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLoginDown_descriptor_, &UserLoginDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserLogoutUp_descriptor_, &UserLogoutUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserinfoUp_descriptor_, &GetUserinfoUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetUserinfoDown_descriptor_, &GetUserinfoDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserNameUp_descriptor_, &ChangeUserNameUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserIconUp_descriptor_, &ChangeUserIconUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeUserStateUp_descriptor_, &ChangeUserStateUp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_1100000_5fUserMessage_2eproto() {
  delete UserIdBean::default_instance_;
  delete UserIdBean_reflection_;
  delete UserInfoBean::default_instance_;
  delete UserInfoBean_reflection_;
  delete UserLoginUp::default_instance_;
  delete UserLoginUp_reflection_;
  delete UserLoginDown::default_instance_;
  delete UserLoginDown_reflection_;
  delete UserLogoutUp::default_instance_;
  delete UserLogoutUp_reflection_;
  delete GetUserinfoUp::default_instance_;
  delete GetUserinfoUp_reflection_;
  delete GetUserinfoDown::default_instance_;
  delete GetUserinfoDown_reflection_;
  delete ChangeUserNameUp::default_instance_;
  delete ChangeUserNameUp_reflection_;
  delete ChangeUserIconUp::default_instance_;
  delete ChangeUserIconUp_reflection_;
  delete ChangeUserStateUp::default_instance_;
  delete ChangeUserStateUp_reflection_;
}

void protobuf_AddDesc_1100000_5fUserMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\0311100000_UserMessage.proto\"M\n\nUserIdBea"
    "n\022\016\n\006userId\030\001 \002(\t\022\022\n\ncreateTime\030\002 \002(\t\022\014\n"
    "\004name\030\003 \002(\t\022\r\n\005level\030\004 \002(\r\"\334\001\n\014UserInfoB"
    "ean\022\014\n\004name\030\001 \002(\t\022\r\n\005level\030\002 \002(\r\022\022\n\nexpe"
    "rience\030\003 \002(\r\022\014\n\004icon\030\004 \002(\r\022\r\n\005power\030\005 \002("
    "\r\022\027\n\017modifyNameCount\030\006 \002(\r\022\022\n\neventState"
    "\030\007 \002(\t\022\025\n\rfunctionState\030\010 \002(\t\022\r\n\005lucky\030\t"
    " \002(\r\022\024\n\014currentState\030\n \002(\r\022\025\n\rbuyPowerCo"
    "unt\030\013 \002(\r\"J\n\013UserLoginUp\022\r\n\005token\030\001 \002(\t\022"
    "\013\n\003rid\030\002 \002(\r\022\021\n\tuserIdStr\030\003 \002(\t\022\014\n\004asid\030"
    "\004 \002(\r\"7\n\rUserLoginDown\022\022\n\nloginState\030\001 \002"
    "(\r\022\022\n\nlogoutTime\030\002 \002(\t\"\016\n\014UserLogoutUp\"\037"
    "\n\rGetUserinfoUp\022\016\n\006userId\030\001 \002(\t\"F\n\017GetUs"
    "erinfoDown\022\016\n\006userId\030\001 \002(\t\022#\n\014userInfoBe"
    "an\030\002 \002(\0132\r.UserInfoBean\"$\n\020ChangeUserNam"
    "eUp\022\020\n\010userName\030\001 \002(\t\" \n\020ChangeUserIconU"
    "p\022\014\n\004icon\030\001 \002(\r\">\n\021ChangeUserStateUp\022\022\n\n"
    "eventState\030\001 \002(\t\022\025\n\rfunctionState\030\002 \002(\t*"
    "\314\001\n\021UserCommondIdEnum\022\022\n\014_UserLoginUp\020\343\221"
    "C\022\024\n\016_UserLoginDown\020\344\221C\022\023\n\r_UserLogoutUp"
    "\020\345\221C\022\024\n\016_GetUserinfoUp\020\347\221C\022\026\n\020_GetUserin"
    "foDown\020\350\221C\022\027\n\021_ChangeUserNameUp\020\351\221C\022\027\n\021_"
    "ChangeUserIconUp\020\353\221C\022\030\n\022_ChangeUserState"
    "Up\020\355\221CB\036\n\017com.cwa.messageB\013UserMessage", 958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "1100000_UserMessage.proto", &protobuf_RegisterTypes);
  UserIdBean::default_instance_ = new UserIdBean();
  UserInfoBean::default_instance_ = new UserInfoBean();
  UserLoginUp::default_instance_ = new UserLoginUp();
  UserLoginDown::default_instance_ = new UserLoginDown();
  UserLogoutUp::default_instance_ = new UserLogoutUp();
  GetUserinfoUp::default_instance_ = new GetUserinfoUp();
  GetUserinfoDown::default_instance_ = new GetUserinfoDown();
  ChangeUserNameUp::default_instance_ = new ChangeUserNameUp();
  ChangeUserIconUp::default_instance_ = new ChangeUserIconUp();
  ChangeUserStateUp::default_instance_ = new ChangeUserStateUp();
  UserIdBean::default_instance_->InitAsDefaultInstance();
  UserInfoBean::default_instance_->InitAsDefaultInstance();
  UserLoginUp::default_instance_->InitAsDefaultInstance();
  UserLoginDown::default_instance_->InitAsDefaultInstance();
  UserLogoutUp::default_instance_->InitAsDefaultInstance();
  GetUserinfoUp::default_instance_->InitAsDefaultInstance();
  GetUserinfoDown::default_instance_->InitAsDefaultInstance();
  ChangeUserNameUp::default_instance_->InitAsDefaultInstance();
  ChangeUserIconUp::default_instance_->InitAsDefaultInstance();
  ChangeUserStateUp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_1100000_5fUserMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_1100000_5fUserMessage_2eproto {
  StaticDescriptorInitializer_1100000_5fUserMessage_2eproto() {
    protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  }
} static_descriptor_initializer_1100000_5fUserMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* UserCommondIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserCommondIdEnum_descriptor_;
}
bool UserCommondIdEnum_IsValid(int value) {
  switch(value) {
    case 1100003:
    case 1100004:
    case 1100005:
    case 1100007:
    case 1100008:
    case 1100009:
    case 1100011:
    case 1100013:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int UserIdBean::kUserIdFieldNumber;
const int UserIdBean::kCreateTimeFieldNumber;
const int UserIdBean::kNameFieldNumber;
const int UserIdBean::kLevelFieldNumber;
#endif  // !_MSC_VER

UserIdBean::UserIdBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserIdBean::InitAsDefaultInstance() {
}

UserIdBean::UserIdBean(const UserIdBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserIdBean::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserIdBean::~UserIdBean() {
  SharedDtor();
}

void UserIdBean::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void UserIdBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserIdBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserIdBean_descriptor_;
}

const UserIdBean& UserIdBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

UserIdBean* UserIdBean::default_instance_ = NULL;

UserIdBean* UserIdBean::New() const {
  return new UserIdBean;
}

void UserIdBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserIdBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_createTime;
        break;
      }

      // required string createTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserIdBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required string createTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->createtime(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserIdBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required string createTime = 2;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->createtime(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserIdBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required string createTime = 2;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserIdBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserIdBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserIdBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserIdBean::MergeFrom(const UserIdBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserIdBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserIdBean::CopyFrom(const UserIdBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserIdBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserIdBean::Swap(UserIdBean* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(createtime_, other->createtime_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserIdBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserIdBean_descriptor_;
  metadata.reflection = UserIdBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfoBean::kNameFieldNumber;
const int UserInfoBean::kLevelFieldNumber;
const int UserInfoBean::kExperienceFieldNumber;
const int UserInfoBean::kIconFieldNumber;
const int UserInfoBean::kPowerFieldNumber;
const int UserInfoBean::kModifyNameCountFieldNumber;
const int UserInfoBean::kEventStateFieldNumber;
const int UserInfoBean::kFunctionStateFieldNumber;
const int UserInfoBean::kLuckyFieldNumber;
const int UserInfoBean::kCurrentStateFieldNumber;
const int UserInfoBean::kBuyPowerCountFieldNumber;
#endif  // !_MSC_VER

UserInfoBean::UserInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfoBean::InitAsDefaultInstance() {
}

UserInfoBean::UserInfoBean(const UserInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfoBean::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  experience_ = 0u;
  icon_ = 0u;
  power_ = 0u;
  modifynamecount_ = 0u;
  eventstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  functionstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lucky_ = 0u;
  currentstate_ = 0u;
  buypowercount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfoBean::~UserInfoBean() {
  SharedDtor();
}

void UserInfoBean::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (eventstate_ != &::google::protobuf::internal::kEmptyString) {
    delete eventstate_;
  }
  if (functionstate_ != &::google::protobuf::internal::kEmptyString) {
    delete functionstate_;
  }
  if (this != default_instance_) {
  }
}

void UserInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfoBean_descriptor_;
}

const UserInfoBean& UserInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

UserInfoBean* UserInfoBean::default_instance_ = NULL;

UserInfoBean* UserInfoBean::New() const {
  return new UserInfoBean;
}

void UserInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    experience_ = 0u;
    icon_ = 0u;
    power_ = 0u;
    modifynamecount_ = 0u;
    if (has_eventstate()) {
      if (eventstate_ != &::google::protobuf::internal::kEmptyString) {
        eventstate_->clear();
      }
    }
    if (has_functionstate()) {
      if (functionstate_ != &::google::protobuf::internal::kEmptyString) {
        functionstate_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    lucky_ = 0u;
    currentstate_ = 0u;
    buypowercount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_experience;
        break;
      }

      // required uint32 experience = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_icon;
        break;
      }

      // required uint32 icon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_icon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_power;
        break;
      }

      // required uint32 power = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_modifyNameCount;
        break;
      }

      // required uint32 modifyNameCount = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modifyNameCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modifynamecount_)));
          set_has_modifynamecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_eventState;
        break;
      }

      // required string eventState = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eventState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventstate().data(), this->eventstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_functionState;
        break;
      }

      // required string functionState = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->functionstate().data(), this->functionstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_lucky;
        break;
      }

      // required uint32 lucky = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lucky_)));
          set_has_lucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_currentState;
        break;
      }

      // required uint32 currentState = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &currentstate_)));
          set_has_currentstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_buyPowerCount;
        break;
      }

      // required uint32 buyPowerCount = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyPowerCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buypowercount_)));
          set_has_buypowercount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 experience = 3;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->experience(), output);
  }

  // required uint32 icon = 4;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->icon(), output);
  }

  // required uint32 power = 5;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->power(), output);
  }

  // required uint32 modifyNameCount = 6;
  if (has_modifynamecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->modifynamecount(), output);
  }

  // required string eventState = 7;
  if (has_eventstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstate().data(), this->eventstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->eventstate(), output);
  }

  // required string functionState = 8;
  if (has_functionstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionstate().data(), this->functionstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->functionstate(), output);
  }

  // required uint32 lucky = 9;
  if (has_lucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->lucky(), output);
  }

  // required uint32 currentState = 10;
  if (has_currentstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->currentstate(), output);
  }

  // required uint32 buyPowerCount = 11;
  if (has_buypowercount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->buypowercount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 experience = 3;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->experience(), target);
  }

  // required uint32 icon = 4;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->icon(), target);
  }

  // required uint32 power = 5;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->power(), target);
  }

  // required uint32 modifyNameCount = 6;
  if (has_modifynamecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->modifynamecount(), target);
  }

  // required string eventState = 7;
  if (has_eventstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstate().data(), this->eventstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->eventstate(), target);
  }

  // required string functionState = 8;
  if (has_functionstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionstate().data(), this->functionstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->functionstate(), target);
  }

  // required uint32 lucky = 9;
  if (has_lucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->lucky(), target);
  }

  // required uint32 currentState = 10;
  if (has_currentstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->currentstate(), target);
  }

  // required uint32 buyPowerCount = 11;
  if (has_buypowercount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->buypowercount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 experience = 3;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // required uint32 icon = 4;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

    // required uint32 power = 5;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->power());
    }

    // required uint32 modifyNameCount = 6;
    if (has_modifynamecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modifynamecount());
    }

    // required string eventState = 7;
    if (has_eventstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventstate());
    }

    // required string functionState = 8;
    if (has_functionstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionstate());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 lucky = 9;
    if (has_lucky()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lucky());
    }

    // required uint32 currentState = 10;
    if (has_currentstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->currentstate());
    }

    // required uint32 buyPowerCount = 11;
    if (has_buypowercount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buypowercount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfoBean::MergeFrom(const UserInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_icon()) {
      set_icon(from.icon());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_modifynamecount()) {
      set_modifynamecount(from.modifynamecount());
    }
    if (from.has_eventstate()) {
      set_eventstate(from.eventstate());
    }
    if (from.has_functionstate()) {
      set_functionstate(from.functionstate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_lucky()) {
      set_lucky(from.lucky());
    }
    if (from.has_currentstate()) {
      set_currentstate(from.currentstate());
    }
    if (from.has_buypowercount()) {
      set_buypowercount(from.buypowercount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfoBean::CopyFrom(const UserInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void UserInfoBean::Swap(UserInfoBean* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(experience_, other->experience_);
    std::swap(icon_, other->icon_);
    std::swap(power_, other->power_);
    std::swap(modifynamecount_, other->modifynamecount_);
    std::swap(eventstate_, other->eventstate_);
    std::swap(functionstate_, other->functionstate_);
    std::swap(lucky_, other->lucky_);
    std::swap(currentstate_, other->currentstate_);
    std::swap(buypowercount_, other->buypowercount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfoBean_descriptor_;
  metadata.reflection = UserInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginUp::kTokenFieldNumber;
const int UserLoginUp::kRidFieldNumber;
const int UserLoginUp::kUserIdStrFieldNumber;
const int UserLoginUp::kAsidFieldNumber;
#endif  // !_MSC_VER

UserLoginUp::UserLoginUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginUp::InitAsDefaultInstance() {
}

UserLoginUp::UserLoginUp(const UserLoginUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginUp::SharedCtor() {
  _cached_size_ = 0;
  token_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rid_ = 0u;
  useridstr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  asid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginUp::~UserLoginUp() {
  SharedDtor();
}

void UserLoginUp::SharedDtor() {
  if (token_ != &::google::protobuf::internal::kEmptyString) {
    delete token_;
  }
  if (useridstr_ != &::google::protobuf::internal::kEmptyString) {
    delete useridstr_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginUp_descriptor_;
}

const UserLoginUp& UserLoginUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

UserLoginUp* UserLoginUp::default_instance_ = NULL;

UserLoginUp* UserLoginUp::New() const {
  return new UserLoginUp;
}

void UserLoginUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_token()) {
      if (token_ != &::google::protobuf::internal::kEmptyString) {
        token_->clear();
      }
    }
    rid_ = 0u;
    if (has_useridstr()) {
      if (useridstr_ != &::google::protobuf::internal::kEmptyString) {
        useridstr_->clear();
      }
    }
    asid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string token = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->token().data(), this->token().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rid;
        break;
      }

      // required uint32 rid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_userIdStr;
        break;
      }

      // required string userIdStr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userIdStr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_useridstr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->useridstr().data(), this->useridstr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_asid;
        break;
      }

      // required uint32 asid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_asid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &asid_)));
          set_has_asid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->token(), output);
  }

  // required uint32 rid = 2;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->rid(), output);
  }

  // required string userIdStr = 3;
  if (has_useridstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useridstr().data(), this->useridstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->useridstr(), output);
  }

  // required uint32 asid = 4;
  if (has_asid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->asid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string token = 1;
  if (has_token()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->token().data(), this->token().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->token(), target);
  }

  // required uint32 rid = 2;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->rid(), target);
  }

  // required string userIdStr = 3;
  if (has_useridstr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->useridstr().data(), this->useridstr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->useridstr(), target);
  }

  // required uint32 asid = 4;
  if (has_asid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->asid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string token = 1;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // required uint32 rid = 2;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rid());
    }

    // required string userIdStr = 3;
    if (has_useridstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->useridstr());
    }

    // required uint32 asid = 4;
    if (has_asid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->asid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginUp::MergeFrom(const UserLoginUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_token()) {
      set_token(from.token());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_useridstr()) {
      set_useridstr(from.useridstr());
    }
    if (from.has_asid()) {
      set_asid(from.asid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginUp::CopyFrom(const UserLoginUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void UserLoginUp::Swap(UserLoginUp* other) {
  if (other != this) {
    std::swap(token_, other->token_);
    std::swap(rid_, other->rid_);
    std::swap(useridstr_, other->useridstr_);
    std::swap(asid_, other->asid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginUp_descriptor_;
  metadata.reflection = UserLoginUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserLoginDown::kLoginStateFieldNumber;
const int UserLoginDown::kLogoutTimeFieldNumber;
#endif  // !_MSC_VER

UserLoginDown::UserLoginDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLoginDown::InitAsDefaultInstance() {
}

UserLoginDown::UserLoginDown(const UserLoginDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLoginDown::SharedCtor() {
  _cached_size_ = 0;
  loginstate_ = 0u;
  logouttime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLoginDown::~UserLoginDown() {
  SharedDtor();
}

void UserLoginDown::SharedDtor() {
  if (logouttime_ != &::google::protobuf::internal::kEmptyString) {
    delete logouttime_;
  }
  if (this != default_instance_) {
  }
}

void UserLoginDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLoginDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLoginDown_descriptor_;
}

const UserLoginDown& UserLoginDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

UserLoginDown* UserLoginDown::default_instance_ = NULL;

UserLoginDown* UserLoginDown::New() const {
  return new UserLoginDown;
}

void UserLoginDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginstate_ = 0u;
    if (has_logouttime()) {
      if (logouttime_ != &::google::protobuf::internal::kEmptyString) {
        logouttime_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLoginDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 loginState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loginstate_)));
          set_has_loginstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_logoutTime;
        break;
      }

      // required string logoutTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_logoutTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_logouttime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->logouttime().data(), this->logouttime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserLoginDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 loginState = 1;
  if (has_loginstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->loginstate(), output);
  }

  // required string logoutTime = 2;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logouttime().data(), this->logouttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->logouttime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLoginDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 loginState = 1;
  if (has_loginstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->loginstate(), target);
  }

  // required string logoutTime = 2;
  if (has_logouttime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->logouttime().data(), this->logouttime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->logouttime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLoginDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 loginState = 1;
    if (has_loginstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loginstate());
    }

    // required string logoutTime = 2;
    if (has_logouttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->logouttime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLoginDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLoginDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLoginDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLoginDown::MergeFrom(const UserLoginDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginstate()) {
      set_loginstate(from.loginstate());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLoginDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLoginDown::CopyFrom(const UserLoginDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLoginDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UserLoginDown::Swap(UserLoginDown* other) {
  if (other != this) {
    std::swap(loginstate_, other->loginstate_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLoginDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLoginDown_descriptor_;
  metadata.reflection = UserLoginDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

UserLogoutUp::UserLogoutUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserLogoutUp::InitAsDefaultInstance() {
}

UserLogoutUp::UserLogoutUp(const UserLogoutUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserLogoutUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserLogoutUp::~UserLogoutUp() {
  SharedDtor();
}

void UserLogoutUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UserLogoutUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserLogoutUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserLogoutUp_descriptor_;
}

const UserLogoutUp& UserLogoutUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

UserLogoutUp* UserLogoutUp::default_instance_ = NULL;

UserLogoutUp* UserLogoutUp::New() const {
  return new UserLogoutUp;
}

void UserLogoutUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserLogoutUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void UserLogoutUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserLogoutUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserLogoutUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserLogoutUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserLogoutUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserLogoutUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserLogoutUp::MergeFrom(const UserLogoutUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserLogoutUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserLogoutUp::CopyFrom(const UserLogoutUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserLogoutUp::IsInitialized() const {

  return true;
}

void UserLogoutUp::Swap(UserLogoutUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserLogoutUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserLogoutUp_descriptor_;
  metadata.reflection = UserLogoutUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserinfoUp::kUserIdFieldNumber;
#endif  // !_MSC_VER

GetUserinfoUp::GetUserinfoUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserinfoUp::InitAsDefaultInstance() {
}

GetUserinfoUp::GetUserinfoUp(const GetUserinfoUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserinfoUp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserinfoUp::~GetUserinfoUp() {
  SharedDtor();
}

void GetUserinfoUp::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetUserinfoUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserinfoUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserinfoUp_descriptor_;
}

const GetUserinfoUp& GetUserinfoUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

GetUserinfoUp* GetUserinfoUp::default_instance_ = NULL;

GetUserinfoUp* GetUserinfoUp::New() const {
  return new GetUserinfoUp;
}

void GetUserinfoUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserinfoUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserinfoUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserinfoUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserinfoUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserinfoUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserinfoUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserinfoUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserinfoUp::MergeFrom(const GetUserinfoUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserinfoUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserinfoUp::CopyFrom(const GetUserinfoUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserinfoUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetUserinfoUp::Swap(GetUserinfoUp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserinfoUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserinfoUp_descriptor_;
  metadata.reflection = GetUserinfoUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetUserinfoDown::kUserIdFieldNumber;
const int GetUserinfoDown::kUserInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetUserinfoDown::GetUserinfoDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetUserinfoDown::InitAsDefaultInstance() {
  userinfobean_ = const_cast< ::UserInfoBean*>(&::UserInfoBean::default_instance());
}

GetUserinfoDown::GetUserinfoDown(const GetUserinfoDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetUserinfoDown::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userinfobean_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetUserinfoDown::~GetUserinfoDown() {
  SharedDtor();
}

void GetUserinfoDown::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
    delete userinfobean_;
  }
}

void GetUserinfoDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetUserinfoDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetUserinfoDown_descriptor_;
}

const GetUserinfoDown& GetUserinfoDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

GetUserinfoDown* GetUserinfoDown::default_instance_ = NULL;

GetUserinfoDown* GetUserinfoDown::New() const {
  return new GetUserinfoDown;
}

void GetUserinfoDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    if (has_userinfobean()) {
      if (userinfobean_ != NULL) userinfobean_->::UserInfoBean::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetUserinfoDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_userInfoBean;
        break;
      }

      // required .UserInfoBean userInfoBean = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_userInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetUserinfoDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required .UserInfoBean userInfoBean = 2;
  if (has_userinfobean()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->userinfobean(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetUserinfoDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required .UserInfoBean userInfoBean = 2;
  if (has_userinfobean()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->userinfobean(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetUserinfoDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required .UserInfoBean userInfoBean = 2;
    if (has_userinfobean()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userinfobean());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetUserinfoDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetUserinfoDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetUserinfoDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetUserinfoDown::MergeFrom(const GetUserinfoDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_userinfobean()) {
      mutable_userinfobean()->::UserInfoBean::MergeFrom(from.userinfobean());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetUserinfoDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetUserinfoDown::CopyFrom(const GetUserinfoDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetUserinfoDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_userinfobean()) {
    if (!this->userinfobean().IsInitialized()) return false;
  }
  return true;
}

void GetUserinfoDown::Swap(GetUserinfoDown* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(userinfobean_, other->userinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetUserinfoDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetUserinfoDown_descriptor_;
  metadata.reflection = GetUserinfoDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserNameUp::kUserNameFieldNumber;
#endif  // !_MSC_VER

ChangeUserNameUp::ChangeUserNameUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserNameUp::InitAsDefaultInstance() {
}

ChangeUserNameUp::ChangeUserNameUp(const ChangeUserNameUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserNameUp::SharedCtor() {
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserNameUp::~ChangeUserNameUp() {
  SharedDtor();
}

void ChangeUserNameUp::SharedDtor() {
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void ChangeUserNameUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserNameUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserNameUp_descriptor_;
}

const ChangeUserNameUp& ChangeUserNameUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

ChangeUserNameUp* ChangeUserNameUp::default_instance_ = NULL;

ChangeUserNameUp* ChangeUserNameUp::New() const {
  return new ChangeUserNameUp;
}

void ChangeUserNameUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserNameUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserNameUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserNameUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userName = 1;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserNameUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userName = 1;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserNameUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserNameUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserNameUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserNameUp::MergeFrom(const ChangeUserNameUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserNameUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserNameUp::CopyFrom(const ChangeUserNameUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserNameUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeUserNameUp::Swap(ChangeUserNameUp* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserNameUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserNameUp_descriptor_;
  metadata.reflection = ChangeUserNameUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserIconUp::kIconFieldNumber;
#endif  // !_MSC_VER

ChangeUserIconUp::ChangeUserIconUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserIconUp::InitAsDefaultInstance() {
}

ChangeUserIconUp::ChangeUserIconUp(const ChangeUserIconUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserIconUp::SharedCtor() {
  _cached_size_ = 0;
  icon_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserIconUp::~ChangeUserIconUp() {
  SharedDtor();
}

void ChangeUserIconUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChangeUserIconUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserIconUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserIconUp_descriptor_;
}

const ChangeUserIconUp& ChangeUserIconUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

ChangeUserIconUp* ChangeUserIconUp::default_instance_ = NULL;

ChangeUserIconUp* ChangeUserIconUp::New() const {
  return new ChangeUserIconUp;
}

void ChangeUserIconUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    icon_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserIconUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 icon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &icon_)));
          set_has_icon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserIconUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 icon = 1;
  if (has_icon()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->icon(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserIconUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 icon = 1;
  if (has_icon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->icon(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserIconUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 icon = 1;
    if (has_icon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->icon());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserIconUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserIconUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserIconUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserIconUp::MergeFrom(const ChangeUserIconUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_icon()) {
      set_icon(from.icon());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserIconUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserIconUp::CopyFrom(const ChangeUserIconUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserIconUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChangeUserIconUp::Swap(ChangeUserIconUp* other) {
  if (other != this) {
    std::swap(icon_, other->icon_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserIconUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserIconUp_descriptor_;
  metadata.reflection = ChangeUserIconUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChangeUserStateUp::kEventStateFieldNumber;
const int ChangeUserStateUp::kFunctionStateFieldNumber;
#endif  // !_MSC_VER

ChangeUserStateUp::ChangeUserStateUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeUserStateUp::InitAsDefaultInstance() {
}

ChangeUserStateUp::ChangeUserStateUp(const ChangeUserStateUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeUserStateUp::SharedCtor() {
  _cached_size_ = 0;
  eventstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  functionstate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeUserStateUp::~ChangeUserStateUp() {
  SharedDtor();
}

void ChangeUserStateUp::SharedDtor() {
  if (eventstate_ != &::google::protobuf::internal::kEmptyString) {
    delete eventstate_;
  }
  if (functionstate_ != &::google::protobuf::internal::kEmptyString) {
    delete functionstate_;
  }
  if (this != default_instance_) {
  }
}

void ChangeUserStateUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeUserStateUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeUserStateUp_descriptor_;
}

const ChangeUserStateUp& ChangeUserStateUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100000_5fUserMessage_2eproto();
  return *default_instance_;
}

ChangeUserStateUp* ChangeUserStateUp::default_instance_ = NULL;

ChangeUserStateUp* ChangeUserStateUp::New() const {
  return new ChangeUserStateUp;
}

void ChangeUserStateUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_eventstate()) {
      if (eventstate_ != &::google::protobuf::internal::kEmptyString) {
        eventstate_->clear();
      }
    }
    if (has_functionstate()) {
      if (functionstate_ != &::google::protobuf::internal::kEmptyString) {
        functionstate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeUserStateUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string eventState = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eventstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->eventstate().data(), this->eventstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_functionState;
        break;
      }

      // required string functionState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_functionState:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_functionstate()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->functionstate().data(), this->functionstate().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeUserStateUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string eventState = 1;
  if (has_eventstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstate().data(), this->eventstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->eventstate(), output);
  }

  // required string functionState = 2;
  if (has_functionstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionstate().data(), this->functionstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->functionstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeUserStateUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string eventState = 1;
  if (has_eventstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->eventstate().data(), this->eventstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->eventstate(), target);
  }

  // required string functionState = 2;
  if (has_functionstate()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->functionstate().data(), this->functionstate().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->functionstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeUserStateUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string eventState = 1;
    if (has_eventstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eventstate());
    }

    // required string functionState = 2;
    if (has_functionstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->functionstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeUserStateUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeUserStateUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeUserStateUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeUserStateUp::MergeFrom(const ChangeUserStateUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventstate()) {
      set_eventstate(from.eventstate());
    }
    if (from.has_functionstate()) {
      set_functionstate(from.functionstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeUserStateUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeUserStateUp::CopyFrom(const ChangeUserStateUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeUserStateUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChangeUserStateUp::Swap(ChangeUserStateUp* other) {
  if (other != this) {
    std::swap(eventstate_, other->eventstate_);
    std::swap(functionstate_, other->functionstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeUserStateUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeUserStateUp_descriptor_;
  metadata.reflection = ChangeUserStateUp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
