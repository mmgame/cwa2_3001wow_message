// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 1100100_ItemMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "1100100_ItemMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ItemInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllItemInfoUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllItemInfoUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetAllItemInfoDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetAllItemInfoDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UseItemDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UseItemDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* CombineItemUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CombineItemUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ItemCommondIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_1100100_5fItemMessage_2eproto() {
  protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "1100100_ItemMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ItemInfoBean_descriptor_ = file->message_type(0);
  static const int ItemInfoBean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfoBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfoBean, count_),
  };
  ItemInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfoBean_descriptor_,
      ItemInfoBean::default_instance_,
      ItemInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfoBean));
  GetAllItemInfoUp_descriptor_ = file->message_type(1);
  static const int GetAllItemInfoUp_offsets_[1] = {
  };
  GetAllItemInfoUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllItemInfoUp_descriptor_,
      GetAllItemInfoUp::default_instance_,
      GetAllItemInfoUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllItemInfoUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllItemInfoUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllItemInfoUp));
  GetAllItemInfoDown_descriptor_ = file->message_type(2);
  static const int GetAllItemInfoDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllItemInfoDown, iteminfobean_),
  };
  GetAllItemInfoDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetAllItemInfoDown_descriptor_,
      GetAllItemInfoDown::default_instance_,
      GetAllItemInfoDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllItemInfoDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetAllItemInfoDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetAllItemInfoDown));
  UseItemUp_descriptor_ = file->message_type(3);
  static const int UseItemUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemUp, itemid_),
  };
  UseItemUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemUp_descriptor_,
      UseItemUp::default_instance_,
      UseItemUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemUp));
  UseItemDown_descriptor_ = file->message_type(4);
  static const int UseItemDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemDown, iteminfobean_),
  };
  UseItemDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UseItemDown_descriptor_,
      UseItemDown::default_instance_,
      UseItemDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UseItemDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UseItemDown));
  CombineItemUp_descriptor_ = file->message_type(5);
  static const int CombineItemUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineItemUp, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineItemUp, count_),
  };
  CombineItemUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CombineItemUp_descriptor_,
      CombineItemUp::default_instance_,
      CombineItemUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineItemUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CombineItemUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CombineItemUp));
  ItemCommondIdEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_1100100_5fItemMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfoBean_descriptor_, &ItemInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllItemInfoUp_descriptor_, &GetAllItemInfoUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetAllItemInfoDown_descriptor_, &GetAllItemInfoDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemUp_descriptor_, &UseItemUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UseItemDown_descriptor_, &UseItemDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CombineItemUp_descriptor_, &CombineItemUp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_1100100_5fItemMessage_2eproto() {
  delete ItemInfoBean::default_instance_;
  delete ItemInfoBean_reflection_;
  delete GetAllItemInfoUp::default_instance_;
  delete GetAllItemInfoUp_reflection_;
  delete GetAllItemInfoDown::default_instance_;
  delete GetAllItemInfoDown_reflection_;
  delete UseItemUp::default_instance_;
  delete UseItemUp_reflection_;
  delete UseItemDown::default_instance_;
  delete UseItemDown_reflection_;
  delete CombineItemUp::default_instance_;
  delete CombineItemUp_reflection_;
}

void protobuf_AddDesc_1100100_5fItemMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\0311100100_ItemMessage.proto\")\n\014ItemInfoB"
    "ean\022\n\n\002id\030\001 \002(\r\022\r\n\005count\030\002 \002(\r\"\022\n\020GetAll"
    "ItemInfoUp\"9\n\022GetAllItemInfoDown\022#\n\014item"
    "InfoBean\030\001 \003(\0132\r.ItemInfoBean\"\033\n\tUseItem"
    "Up\022\016\n\006itemId\030\001 \002(\r\"2\n\013UseItemDown\022#\n\014ite"
    "mInfoBean\030\001 \003(\0132\r.ItemInfoBean\".\n\rCombin"
    "eItemUp\022\016\n\006itemId\030\001 \002(\r\022\r\n\005count\030\002 \002(\r*\203"
    "\001\n\021ItemCommondIdEnum\022\027\n\021_GetAllItemInfoU"
    "p\020\305\222C\022\031\n\023_GetAllItemInfoDown\020\306\222C\022\020\n\n_Use"
    "ItemUp\020\307\222C\022\022\n\014_UseItemDown\020\310\222C\022\024\n\016_Combi"
    "neItemUp\020\311\222CB\036\n\017com.cwa.messageB\013ItemMes"
    "sage", 444);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "1100100_ItemMessage.proto", &protobuf_RegisterTypes);
  ItemInfoBean::default_instance_ = new ItemInfoBean();
  GetAllItemInfoUp::default_instance_ = new GetAllItemInfoUp();
  GetAllItemInfoDown::default_instance_ = new GetAllItemInfoDown();
  UseItemUp::default_instance_ = new UseItemUp();
  UseItemDown::default_instance_ = new UseItemDown();
  CombineItemUp::default_instance_ = new CombineItemUp();
  ItemInfoBean::default_instance_->InitAsDefaultInstance();
  GetAllItemInfoUp::default_instance_->InitAsDefaultInstance();
  GetAllItemInfoDown::default_instance_->InitAsDefaultInstance();
  UseItemUp::default_instance_->InitAsDefaultInstance();
  UseItemDown::default_instance_->InitAsDefaultInstance();
  CombineItemUp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_1100100_5fItemMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_1100100_5fItemMessage_2eproto {
  StaticDescriptorInitializer_1100100_5fItemMessage_2eproto() {
    protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  }
} static_descriptor_initializer_1100100_5fItemMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* ItemCommondIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemCommondIdEnum_descriptor_;
}
bool ItemCommondIdEnum_IsValid(int value) {
  switch(value) {
    case 1100101:
    case 1100102:
    case 1100103:
    case 1100104:
    case 1100105:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfoBean::kIdFieldNumber;
const int ItemInfoBean::kCountFieldNumber;
#endif  // !_MSC_VER

ItemInfoBean::ItemInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfoBean::InitAsDefaultInstance() {
}

ItemInfoBean::ItemInfoBean(const ItemInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfoBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfoBean::~ItemInfoBean() {
  SharedDtor();
}

void ItemInfoBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfoBean_descriptor_;
}

const ItemInfoBean& ItemInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

ItemInfoBean* ItemInfoBean::default_instance_ = NULL;

ItemInfoBean* ItemInfoBean::New() const {
  return new ItemInfoBean;
}

void ItemInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfoBean::MergeFrom(const ItemInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfoBean::CopyFrom(const ItemInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ItemInfoBean::Swap(ItemInfoBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfoBean_descriptor_;
  metadata.reflection = ItemInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetAllItemInfoUp::GetAllItemInfoUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllItemInfoUp::InitAsDefaultInstance() {
}

GetAllItemInfoUp::GetAllItemInfoUp(const GetAllItemInfoUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllItemInfoUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllItemInfoUp::~GetAllItemInfoUp() {
  SharedDtor();
}

void GetAllItemInfoUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllItemInfoUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllItemInfoUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllItemInfoUp_descriptor_;
}

const GetAllItemInfoUp& GetAllItemInfoUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

GetAllItemInfoUp* GetAllItemInfoUp::default_instance_ = NULL;

GetAllItemInfoUp* GetAllItemInfoUp::New() const {
  return new GetAllItemInfoUp;
}

void GetAllItemInfoUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllItemInfoUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetAllItemInfoUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllItemInfoUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllItemInfoUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllItemInfoUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllItemInfoUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllItemInfoUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllItemInfoUp::MergeFrom(const GetAllItemInfoUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllItemInfoUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllItemInfoUp::CopyFrom(const GetAllItemInfoUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllItemInfoUp::IsInitialized() const {

  return true;
}

void GetAllItemInfoUp::Swap(GetAllItemInfoUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllItemInfoUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllItemInfoUp_descriptor_;
  metadata.reflection = GetAllItemInfoUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetAllItemInfoDown::kItemInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetAllItemInfoDown::GetAllItemInfoDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetAllItemInfoDown::InitAsDefaultInstance() {
}

GetAllItemInfoDown::GetAllItemInfoDown(const GetAllItemInfoDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetAllItemInfoDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetAllItemInfoDown::~GetAllItemInfoDown() {
  SharedDtor();
}

void GetAllItemInfoDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetAllItemInfoDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetAllItemInfoDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetAllItemInfoDown_descriptor_;
}

const GetAllItemInfoDown& GetAllItemInfoDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

GetAllItemInfoDown* GetAllItemInfoDown::default_instance_ = NULL;

GetAllItemInfoDown* GetAllItemInfoDown::New() const {
  return new GetAllItemInfoDown;
}

void GetAllItemInfoDown::Clear() {
  iteminfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetAllItemInfoDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemInfoBean itemInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetAllItemInfoDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemInfoBean itemInfoBean = 1;
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetAllItemInfoDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemInfoBean itemInfoBean = 1;
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetAllItemInfoDown::ByteSize() const {
  int total_size = 0;

  // repeated .ItemInfoBean itemInfoBean = 1;
  total_size += 1 * this->iteminfobean_size();
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetAllItemInfoDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetAllItemInfoDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetAllItemInfoDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetAllItemInfoDown::MergeFrom(const GetAllItemInfoDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfobean_.MergeFrom(from.iteminfobean_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetAllItemInfoDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetAllItemInfoDown::CopyFrom(const GetAllItemInfoDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetAllItemInfoDown::IsInitialized() const {

  for (int i = 0; i < iteminfobean_size(); i++) {
    if (!this->iteminfobean(i).IsInitialized()) return false;
  }
  return true;
}

void GetAllItemInfoDown::Swap(GetAllItemInfoDown* other) {
  if (other != this) {
    iteminfobean_.Swap(&other->iteminfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetAllItemInfoDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetAllItemInfoDown_descriptor_;
  metadata.reflection = GetAllItemInfoDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemUp::kItemIdFieldNumber;
#endif  // !_MSC_VER

UseItemUp::UseItemUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemUp::InitAsDefaultInstance() {
}

UseItemUp::UseItemUp(const UseItemUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemUp::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemUp::~UseItemUp() {
  SharedDtor();
}

void UseItemUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItemUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemUp_descriptor_;
}

const UseItemUp& UseItemUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

UseItemUp* UseItemUp::default_instance_ = NULL;

UseItemUp* UseItemUp::New() const {
  return new UseItemUp;
}

void UseItemUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemUp::MergeFrom(const UseItemUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemUp::CopyFrom(const UseItemUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UseItemUp::Swap(UseItemUp* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemUp_descriptor_;
  metadata.reflection = UseItemUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UseItemDown::kItemInfoBeanFieldNumber;
#endif  // !_MSC_VER

UseItemDown::UseItemDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UseItemDown::InitAsDefaultInstance() {
}

UseItemDown::UseItemDown(const UseItemDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UseItemDown::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UseItemDown::~UseItemDown() {
  SharedDtor();
}

void UseItemDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UseItemDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UseItemDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UseItemDown_descriptor_;
}

const UseItemDown& UseItemDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

UseItemDown* UseItemDown::default_instance_ = NULL;

UseItemDown* UseItemDown::New() const {
  return new UseItemDown;
}

void UseItemDown::Clear() {
  iteminfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UseItemDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ItemInfoBean itemInfoBean = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_iteminfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UseItemDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ItemInfoBean itemInfoBean = 1;
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->iteminfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UseItemDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ItemInfoBean itemInfoBean = 1;
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->iteminfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UseItemDown::ByteSize() const {
  int total_size = 0;

  // repeated .ItemInfoBean itemInfoBean = 1;
  total_size += 1 * this->iteminfobean_size();
  for (int i = 0; i < this->iteminfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->iteminfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UseItemDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UseItemDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UseItemDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UseItemDown::MergeFrom(const UseItemDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  iteminfobean_.MergeFrom(from.iteminfobean_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UseItemDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UseItemDown::CopyFrom(const UseItemDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UseItemDown::IsInitialized() const {

  for (int i = 0; i < iteminfobean_size(); i++) {
    if (!this->iteminfobean(i).IsInitialized()) return false;
  }
  return true;
}

void UseItemDown::Swap(UseItemDown* other) {
  if (other != this) {
    iteminfobean_.Swap(&other->iteminfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UseItemDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UseItemDown_descriptor_;
  metadata.reflection = UseItemDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CombineItemUp::kItemIdFieldNumber;
const int CombineItemUp::kCountFieldNumber;
#endif  // !_MSC_VER

CombineItemUp::CombineItemUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CombineItemUp::InitAsDefaultInstance() {
}

CombineItemUp::CombineItemUp(const CombineItemUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CombineItemUp::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CombineItemUp::~CombineItemUp() {
  SharedDtor();
}

void CombineItemUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CombineItemUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CombineItemUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CombineItemUp_descriptor_;
}

const CombineItemUp& CombineItemUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100100_5fItemMessage_2eproto();
  return *default_instance_;
}

CombineItemUp* CombineItemUp::default_instance_ = NULL;

CombineItemUp* CombineItemUp::New() const {
  return new CombineItemUp;
}

void CombineItemUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CombineItemUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required uint32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CombineItemUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // required uint32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CombineItemUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // required uint32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CombineItemUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // required uint32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CombineItemUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CombineItemUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CombineItemUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CombineItemUp::MergeFrom(const CombineItemUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CombineItemUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CombineItemUp::CopyFrom(const CombineItemUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CombineItemUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CombineItemUp::Swap(CombineItemUp* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CombineItemUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CombineItemUp_descriptor_;
  metadata.reflection = CombineItemUp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
