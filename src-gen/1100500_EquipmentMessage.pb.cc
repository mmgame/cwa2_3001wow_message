// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 1100500_EquipmentMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "1100500_EquipmentMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EquipmentInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipmentInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* SlotInfoBean_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SlotInfoBean_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEquipmentInfoUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEquipmentInfoUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEquipmentInfoDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEquipmentInfoDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeEquipmentLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeEquipmentLevelUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpgradeEquipmentQualityUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpgradeEquipmentQualityUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PutonPluginUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PutonPluginUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DischargePlugUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DischargePlugUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefinePlugUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefinePlugUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RefinePlugDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RefinePlugDown_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EquipmentCommondIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_1100500_5fEquipmentMessage_2eproto() {
  protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "1100500_EquipmentMessage.proto");
  GOOGLE_CHECK(file != NULL);
  EquipmentInfoBean_descriptor_ = file->message_type(0);
  static const int EquipmentInfoBean_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, positionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, slotinfobean_),
  };
  EquipmentInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipmentInfoBean_descriptor_,
      EquipmentInfoBean::default_instance_,
      EquipmentInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipmentInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipmentInfoBean));
  SlotInfoBean_descriptor_ = file->message_type(1);
  static const int SlotInfoBean_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfoBean, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfoBean, plugid_),
  };
  SlotInfoBean_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SlotInfoBean_descriptor_,
      SlotInfoBean::default_instance_,
      SlotInfoBean_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfoBean, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SlotInfoBean, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SlotInfoBean));
  GetEquipmentInfoUp_descriptor_ = file->message_type(2);
  static const int GetEquipmentInfoUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoUp, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoUp, herokeyid_),
  };
  GetEquipmentInfoUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEquipmentInfoUp_descriptor_,
      GetEquipmentInfoUp::default_instance_,
      GetEquipmentInfoUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEquipmentInfoUp));
  GetEquipmentInfoDown_descriptor_ = file->message_type(3);
  static const int GetEquipmentInfoDown_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoDown, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoDown, herokeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoDown, equipmentinfobean_),
  };
  GetEquipmentInfoDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEquipmentInfoDown_descriptor_,
      GetEquipmentInfoDown::default_instance_,
      GetEquipmentInfoDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEquipmentInfoDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEquipmentInfoDown));
  UpgradeEquipmentLevelUp_descriptor_ = file->message_type(4);
  static const int UpgradeEquipmentLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentLevelUp, herokeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentLevelUp, position_),
  };
  UpgradeEquipmentLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeEquipmentLevelUp_descriptor_,
      UpgradeEquipmentLevelUp::default_instance_,
      UpgradeEquipmentLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeEquipmentLevelUp));
  UpgradeEquipmentQualityUp_descriptor_ = file->message_type(5);
  static const int UpgradeEquipmentQualityUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentQualityUp, herokeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentQualityUp, position_),
  };
  UpgradeEquipmentQualityUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpgradeEquipmentQualityUp_descriptor_,
      UpgradeEquipmentQualityUp::default_instance_,
      UpgradeEquipmentQualityUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentQualityUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpgradeEquipmentQualityUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpgradeEquipmentQualityUp));
  PutonPluginUp_descriptor_ = file->message_type(6);
  static const int PutonPluginUp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, herokeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, slotid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, pluginid_),
  };
  PutonPluginUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PutonPluginUp_descriptor_,
      PutonPluginUp::default_instance_,
      PutonPluginUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PutonPluginUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PutonPluginUp));
  DischargePlugUp_descriptor_ = file->message_type(7);
  static const int DischargePlugUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DischargePlugUp, herokeyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DischargePlugUp, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DischargePlugUp, type_),
  };
  DischargePlugUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DischargePlugUp_descriptor_,
      DischargePlugUp::default_instance_,
      DischargePlugUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DischargePlugUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DischargePlugUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DischargePlugUp));
  RefinePlugUp_descriptor_ = file->message_type(8);
  static const int RefinePlugUp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugUp, plugid_),
  };
  RefinePlugUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefinePlugUp_descriptor_,
      RefinePlugUp::default_instance_,
      RefinePlugUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefinePlugUp));
  RefinePlugDown_descriptor_ = file->message_type(9);
  static const int RefinePlugDown_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugDown, plugid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugDown, success_),
  };
  RefinePlugDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RefinePlugDown_descriptor_,
      RefinePlugDown::default_instance_,
      RefinePlugDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RefinePlugDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RefinePlugDown));
  EquipmentCommondIdEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_1100500_5fEquipmentMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipmentInfoBean_descriptor_, &EquipmentInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SlotInfoBean_descriptor_, &SlotInfoBean::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEquipmentInfoUp_descriptor_, &GetEquipmentInfoUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEquipmentInfoDown_descriptor_, &GetEquipmentInfoDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeEquipmentLevelUp_descriptor_, &UpgradeEquipmentLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpgradeEquipmentQualityUp_descriptor_, &UpgradeEquipmentQualityUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PutonPluginUp_descriptor_, &PutonPluginUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DischargePlugUp_descriptor_, &DischargePlugUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefinePlugUp_descriptor_, &RefinePlugUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RefinePlugDown_descriptor_, &RefinePlugDown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_1100500_5fEquipmentMessage_2eproto() {
  delete EquipmentInfoBean::default_instance_;
  delete EquipmentInfoBean_reflection_;
  delete SlotInfoBean::default_instance_;
  delete SlotInfoBean_reflection_;
  delete GetEquipmentInfoUp::default_instance_;
  delete GetEquipmentInfoUp_reflection_;
  delete GetEquipmentInfoDown::default_instance_;
  delete GetEquipmentInfoDown_reflection_;
  delete UpgradeEquipmentLevelUp::default_instance_;
  delete UpgradeEquipmentLevelUp_reflection_;
  delete UpgradeEquipmentQualityUp::default_instance_;
  delete UpgradeEquipmentQualityUp_reflection_;
  delete PutonPluginUp::default_instance_;
  delete PutonPluginUp_reflection_;
  delete DischargePlugUp::default_instance_;
  delete DischargePlugUp_reflection_;
  delete RefinePlugUp::default_instance_;
  delete RefinePlugUp_reflection_;
  delete RefinePlugDown::default_instance_;
  delete RefinePlugDown_reflection_;
}

void protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\0361100500_EquipmentMessage.proto\"l\n\021Equi"
    "pmentInfoBean\022\022\n\npositionId\030\001 \002(\r\022\r\n\005lev"
    "el\030\002 \002(\r\022\017\n\007quality\030\003 \002(\r\022#\n\014slotInfoBea"
    "n\030\004 \003(\0132\r.SlotInfoBean\"*\n\014SlotInfoBean\022\n"
    "\n\002id\030\001 \002(\r\022\016\n\006plugId\030\002 \002(\r\"7\n\022GetEquipme"
    "ntInfoUp\022\016\n\006userId\030\001 \002(\t\022\021\n\theroKeyId\030\002 "
    "\002(\r\"h\n\024GetEquipmentInfoDown\022\016\n\006userId\030\001 "
    "\002(\t\022\021\n\theroKeyId\030\002 \002(\r\022-\n\021equipmentInfoB"
    "ean\030\003 \003(\0132\022.EquipmentInfoBean\">\n\027Upgrade"
    "EquipmentLevelUp\022\021\n\theroKeyId\030\001 \002(\r\022\020\n\010p"
    "osition\030\002 \002(\r\"@\n\031UpgradeEquipmentQuality"
    "Up\022\021\n\theroKeyId\030\001 \002(\r\022\020\n\010position\030\002 \002(\r\""
    "V\n\rPutonPluginUp\022\021\n\theroKeyId\030\001 \002(\r\022\020\n\010p"
    "osition\030\002 \002(\r\022\016\n\006slotId\030\003 \002(\r\022\020\n\010pluginI"
    "d\030\004 \002(\r\"D\n\017DischargePlugUp\022\021\n\theroKeyId\030"
    "\001 \002(\r\022\020\n\010position\030\002 \002(\r\022\014\n\004type\030\003 \002(\r\"\036\n"
    "\014RefinePlugUp\022\016\n\006plugId\030\001 \002(\r\"1\n\016RefineP"
    "lugDown\022\016\n\006plugId\030\001 \002(\r\022\017\n\007success\030\002 \002(\010"
    "*\354\001\n\026EquipmentCommondIdEnum\022\031\n\023_GetEquip"
    "mentInfoUp\020\325\225C\022\033\n\025_GetEquipmentInfoDown\020"
    "\326\225C\022\036\n\030_UpgradeEquipmentLevelUp\020\327\225C\022 \n\032_"
    "UpgradeEquipmentQualityUp\020\331\225C\022\024\n\016_PutonP"
    "luginUp\020\333\225C\022\026\n\020_DischargePlugUp\020\335\225C\022\023\n\r_"
    "RefinePlugUp\020\337\225C\022\025\n\017_RefinePlugDown\020\340\225CB"
    "#\n\017com.cwa.messageB\020EquipmentMessage", 996);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "1100500_EquipmentMessage.proto", &protobuf_RegisterTypes);
  EquipmentInfoBean::default_instance_ = new EquipmentInfoBean();
  SlotInfoBean::default_instance_ = new SlotInfoBean();
  GetEquipmentInfoUp::default_instance_ = new GetEquipmentInfoUp();
  GetEquipmentInfoDown::default_instance_ = new GetEquipmentInfoDown();
  UpgradeEquipmentLevelUp::default_instance_ = new UpgradeEquipmentLevelUp();
  UpgradeEquipmentQualityUp::default_instance_ = new UpgradeEquipmentQualityUp();
  PutonPluginUp::default_instance_ = new PutonPluginUp();
  DischargePlugUp::default_instance_ = new DischargePlugUp();
  RefinePlugUp::default_instance_ = new RefinePlugUp();
  RefinePlugDown::default_instance_ = new RefinePlugDown();
  EquipmentInfoBean::default_instance_->InitAsDefaultInstance();
  SlotInfoBean::default_instance_->InitAsDefaultInstance();
  GetEquipmentInfoUp::default_instance_->InitAsDefaultInstance();
  GetEquipmentInfoDown::default_instance_->InitAsDefaultInstance();
  UpgradeEquipmentLevelUp::default_instance_->InitAsDefaultInstance();
  UpgradeEquipmentQualityUp::default_instance_->InitAsDefaultInstance();
  PutonPluginUp::default_instance_->InitAsDefaultInstance();
  DischargePlugUp::default_instance_->InitAsDefaultInstance();
  RefinePlugUp::default_instance_->InitAsDefaultInstance();
  RefinePlugDown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_1100500_5fEquipmentMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_1100500_5fEquipmentMessage_2eproto {
  StaticDescriptorInitializer_1100500_5fEquipmentMessage_2eproto() {
    protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  }
} static_descriptor_initializer_1100500_5fEquipmentMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* EquipmentCommondIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentCommondIdEnum_descriptor_;
}
bool EquipmentCommondIdEnum_IsValid(int value) {
  switch(value) {
    case 1100501:
    case 1100502:
    case 1100503:
    case 1100505:
    case 1100507:
    case 1100509:
    case 1100511:
    case 1100512:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EquipmentInfoBean::kPositionIdFieldNumber;
const int EquipmentInfoBean::kLevelFieldNumber;
const int EquipmentInfoBean::kQualityFieldNumber;
const int EquipmentInfoBean::kSlotInfoBeanFieldNumber;
#endif  // !_MSC_VER

EquipmentInfoBean::EquipmentInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipmentInfoBean::InitAsDefaultInstance() {
}

EquipmentInfoBean::EquipmentInfoBean(const EquipmentInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipmentInfoBean::SharedCtor() {
  _cached_size_ = 0;
  positionid_ = 0u;
  level_ = 0u;
  quality_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipmentInfoBean::~EquipmentInfoBean() {
  SharedDtor();
}

void EquipmentInfoBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipmentInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipmentInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipmentInfoBean_descriptor_;
}

const EquipmentInfoBean& EquipmentInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

EquipmentInfoBean* EquipmentInfoBean::default_instance_ = NULL;

EquipmentInfoBean* EquipmentInfoBean::New() const {
  return new EquipmentInfoBean;
}

void EquipmentInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    positionid_ = 0u;
    level_ = 0u;
    quality_ = 0u;
  }
  slotinfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipmentInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 positionId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &positionid_)));
          set_has_positionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_quality;
        break;
      }

      // required uint32 quality = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slotInfoBean;
        break;
      }

      // repeated .SlotInfoBean slotInfoBean = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slotInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slotinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slotInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipmentInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 positionId = 1;
  if (has_positionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->positionid(), output);
  }

  // required uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->quality(), output);
  }

  // repeated .SlotInfoBean slotInfoBean = 4;
  for (int i = 0; i < this->slotinfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->slotinfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipmentInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 positionId = 1;
  if (has_positionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->positionid(), target);
  }

  // required uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // required uint32 quality = 3;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->quality(), target);
  }

  // repeated .SlotInfoBean slotInfoBean = 4;
  for (int i = 0; i < this->slotinfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->slotinfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipmentInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 positionId = 1;
    if (has_positionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->positionid());
    }

    // required uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 quality = 3;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->quality());
    }

  }
  // repeated .SlotInfoBean slotInfoBean = 4;
  total_size += 1 * this->slotinfobean_size();
  for (int i = 0; i < this->slotinfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slotinfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipmentInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipmentInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipmentInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipmentInfoBean::MergeFrom(const EquipmentInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotinfobean_.MergeFrom(from.slotinfobean_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_positionid()) {
      set_positionid(from.positionid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipmentInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipmentInfoBean::CopyFrom(const EquipmentInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipmentInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < slotinfobean_size(); i++) {
    if (!this->slotinfobean(i).IsInitialized()) return false;
  }
  return true;
}

void EquipmentInfoBean::Swap(EquipmentInfoBean* other) {
  if (other != this) {
    std::swap(positionid_, other->positionid_);
    std::swap(level_, other->level_);
    std::swap(quality_, other->quality_);
    slotinfobean_.Swap(&other->slotinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipmentInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipmentInfoBean_descriptor_;
  metadata.reflection = EquipmentInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SlotInfoBean::kIdFieldNumber;
const int SlotInfoBean::kPlugIdFieldNumber;
#endif  // !_MSC_VER

SlotInfoBean::SlotInfoBean()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SlotInfoBean::InitAsDefaultInstance() {
}

SlotInfoBean::SlotInfoBean(const SlotInfoBean& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SlotInfoBean::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  plugid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SlotInfoBean::~SlotInfoBean() {
  SharedDtor();
}

void SlotInfoBean::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SlotInfoBean::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SlotInfoBean::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SlotInfoBean_descriptor_;
}

const SlotInfoBean& SlotInfoBean::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

SlotInfoBean* SlotInfoBean::default_instance_ = NULL;

SlotInfoBean* SlotInfoBean::New() const {
  return new SlotInfoBean;
}

void SlotInfoBean::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    plugid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SlotInfoBean::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_plugId;
        break;
      }

      // required uint32 plugId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_plugId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugid_)));
          set_has_plugid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SlotInfoBean::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 plugId = 2;
  if (has_plugid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->plugid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SlotInfoBean::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 plugId = 2;
  if (has_plugid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->plugid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SlotInfoBean::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // required uint32 plugId = 2;
    if (has_plugid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SlotInfoBean::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SlotInfoBean* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SlotInfoBean*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SlotInfoBean::MergeFrom(const SlotInfoBean& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_plugid()) {
      set_plugid(from.plugid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SlotInfoBean::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SlotInfoBean::CopyFrom(const SlotInfoBean& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SlotInfoBean::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SlotInfoBean::Swap(SlotInfoBean* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(plugid_, other->plugid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SlotInfoBean::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SlotInfoBean_descriptor_;
  metadata.reflection = SlotInfoBean_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEquipmentInfoUp::kUserIdFieldNumber;
const int GetEquipmentInfoUp::kHeroKeyIdFieldNumber;
#endif  // !_MSC_VER

GetEquipmentInfoUp::GetEquipmentInfoUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEquipmentInfoUp::InitAsDefaultInstance() {
}

GetEquipmentInfoUp::GetEquipmentInfoUp(const GetEquipmentInfoUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEquipmentInfoUp::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  herokeyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEquipmentInfoUp::~GetEquipmentInfoUp() {
  SharedDtor();
}

void GetEquipmentInfoUp::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetEquipmentInfoUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEquipmentInfoUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEquipmentInfoUp_descriptor_;
}

const GetEquipmentInfoUp& GetEquipmentInfoUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

GetEquipmentInfoUp* GetEquipmentInfoUp::default_instance_ = NULL;

GetEquipmentInfoUp* GetEquipmentInfoUp::New() const {
  return new GetEquipmentInfoUp;
}

void GetEquipmentInfoUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    herokeyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEquipmentInfoUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroKeyId;
        break;
      }

      // required uint32 heroKeyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroKeyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEquipmentInfoUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required uint32 heroKeyId = 2;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herokeyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEquipmentInfoUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required uint32 heroKeyId = 2;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herokeyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEquipmentInfoUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint32 heroKeyId = 2;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEquipmentInfoUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEquipmentInfoUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEquipmentInfoUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEquipmentInfoUp::MergeFrom(const GetEquipmentInfoUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEquipmentInfoUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEquipmentInfoUp::CopyFrom(const GetEquipmentInfoUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEquipmentInfoUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetEquipmentInfoUp::Swap(GetEquipmentInfoUp* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(herokeyid_, other->herokeyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEquipmentInfoUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEquipmentInfoUp_descriptor_;
  metadata.reflection = GetEquipmentInfoUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEquipmentInfoDown::kUserIdFieldNumber;
const int GetEquipmentInfoDown::kHeroKeyIdFieldNumber;
const int GetEquipmentInfoDown::kEquipmentInfoBeanFieldNumber;
#endif  // !_MSC_VER

GetEquipmentInfoDown::GetEquipmentInfoDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEquipmentInfoDown::InitAsDefaultInstance() {
}

GetEquipmentInfoDown::GetEquipmentInfoDown(const GetEquipmentInfoDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEquipmentInfoDown::SharedCtor() {
  _cached_size_ = 0;
  userid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  herokeyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEquipmentInfoDown::~GetEquipmentInfoDown() {
  SharedDtor();
}

void GetEquipmentInfoDown::SharedDtor() {
  if (userid_ != &::google::protobuf::internal::kEmptyString) {
    delete userid_;
  }
  if (this != default_instance_) {
  }
}

void GetEquipmentInfoDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEquipmentInfoDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEquipmentInfoDown_descriptor_;
}

const GetEquipmentInfoDown& GetEquipmentInfoDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

GetEquipmentInfoDown* GetEquipmentInfoDown::default_instance_ = NULL;

GetEquipmentInfoDown* GetEquipmentInfoDown::New() const {
  return new GetEquipmentInfoDown;
}

void GetEquipmentInfoDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userid()) {
      if (userid_ != &::google::protobuf::internal::kEmptyString) {
        userid_->clear();
      }
    }
    herokeyid_ = 0u;
  }
  equipmentinfobean_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEquipmentInfoDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string userId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->userid().data(), this->userid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_heroKeyId;
        break;
      }

      // required uint32 heroKeyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroKeyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipmentInfoBean;
        break;
      }

      // repeated .EquipmentInfoBean equipmentInfoBean = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipmentInfoBean:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equipmentinfobean()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_equipmentInfoBean;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEquipmentInfoDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->userid(), output);
  }

  // required uint32 heroKeyId = 2;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->herokeyid(), output);
  }

  // repeated .EquipmentInfoBean equipmentInfoBean = 3;
  for (int i = 0; i < this->equipmentinfobean_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->equipmentinfobean(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEquipmentInfoDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string userId = 1;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->userid().data(), this->userid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->userid(), target);
  }

  // required uint32 heroKeyId = 2;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->herokeyid(), target);
  }

  // repeated .EquipmentInfoBean equipmentInfoBean = 3;
  for (int i = 0; i < this->equipmentinfobean_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->equipmentinfobean(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEquipmentInfoDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string userId = 1;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->userid());
    }

    // required uint32 heroKeyId = 2;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

  }
  // repeated .EquipmentInfoBean equipmentInfoBean = 3;
  total_size += 1 * this->equipmentinfobean_size();
  for (int i = 0; i < this->equipmentinfobean_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equipmentinfobean(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEquipmentInfoDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEquipmentInfoDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEquipmentInfoDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEquipmentInfoDown::MergeFrom(const GetEquipmentInfoDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  equipmentinfobean_.MergeFrom(from.equipmentinfobean_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEquipmentInfoDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEquipmentInfoDown::CopyFrom(const GetEquipmentInfoDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEquipmentInfoDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < equipmentinfobean_size(); i++) {
    if (!this->equipmentinfobean(i).IsInitialized()) return false;
  }
  return true;
}

void GetEquipmentInfoDown::Swap(GetEquipmentInfoDown* other) {
  if (other != this) {
    std::swap(userid_, other->userid_);
    std::swap(herokeyid_, other->herokeyid_);
    equipmentinfobean_.Swap(&other->equipmentinfobean_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEquipmentInfoDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEquipmentInfoDown_descriptor_;
  metadata.reflection = GetEquipmentInfoDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeEquipmentLevelUp::kHeroKeyIdFieldNumber;
const int UpgradeEquipmentLevelUp::kPositionFieldNumber;
#endif  // !_MSC_VER

UpgradeEquipmentLevelUp::UpgradeEquipmentLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeEquipmentLevelUp::InitAsDefaultInstance() {
}

UpgradeEquipmentLevelUp::UpgradeEquipmentLevelUp(const UpgradeEquipmentLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeEquipmentLevelUp::SharedCtor() {
  _cached_size_ = 0;
  herokeyid_ = 0u;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeEquipmentLevelUp::~UpgradeEquipmentLevelUp() {
  SharedDtor();
}

void UpgradeEquipmentLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeEquipmentLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeEquipmentLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeEquipmentLevelUp_descriptor_;
}

const UpgradeEquipmentLevelUp& UpgradeEquipmentLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

UpgradeEquipmentLevelUp* UpgradeEquipmentLevelUp::default_instance_ = NULL;

UpgradeEquipmentLevelUp* UpgradeEquipmentLevelUp::New() const {
  return new UpgradeEquipmentLevelUp;
}

void UpgradeEquipmentLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herokeyid_ = 0u;
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeEquipmentLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeEquipmentLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herokeyid(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeEquipmentLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herokeyid(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeEquipmentLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroKeyId = 1;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeEquipmentLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeEquipmentLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeEquipmentLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeEquipmentLevelUp::MergeFrom(const UpgradeEquipmentLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeEquipmentLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeEquipmentLevelUp::CopyFrom(const UpgradeEquipmentLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeEquipmentLevelUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpgradeEquipmentLevelUp::Swap(UpgradeEquipmentLevelUp* other) {
  if (other != this) {
    std::swap(herokeyid_, other->herokeyid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeEquipmentLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeEquipmentLevelUp_descriptor_;
  metadata.reflection = UpgradeEquipmentLevelUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpgradeEquipmentQualityUp::kHeroKeyIdFieldNumber;
const int UpgradeEquipmentQualityUp::kPositionFieldNumber;
#endif  // !_MSC_VER

UpgradeEquipmentQualityUp::UpgradeEquipmentQualityUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpgradeEquipmentQualityUp::InitAsDefaultInstance() {
}

UpgradeEquipmentQualityUp::UpgradeEquipmentQualityUp(const UpgradeEquipmentQualityUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpgradeEquipmentQualityUp::SharedCtor() {
  _cached_size_ = 0;
  herokeyid_ = 0u;
  position_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpgradeEquipmentQualityUp::~UpgradeEquipmentQualityUp() {
  SharedDtor();
}

void UpgradeEquipmentQualityUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpgradeEquipmentQualityUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpgradeEquipmentQualityUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpgradeEquipmentQualityUp_descriptor_;
}

const UpgradeEquipmentQualityUp& UpgradeEquipmentQualityUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

UpgradeEquipmentQualityUp* UpgradeEquipmentQualityUp::default_instance_ = NULL;

UpgradeEquipmentQualityUp* UpgradeEquipmentQualityUp::New() const {
  return new UpgradeEquipmentQualityUp;
}

void UpgradeEquipmentQualityUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herokeyid_ = 0u;
    position_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpgradeEquipmentQualityUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpgradeEquipmentQualityUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herokeyid(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpgradeEquipmentQualityUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herokeyid(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpgradeEquipmentQualityUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroKeyId = 1;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpgradeEquipmentQualityUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpgradeEquipmentQualityUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpgradeEquipmentQualityUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpgradeEquipmentQualityUp::MergeFrom(const UpgradeEquipmentQualityUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpgradeEquipmentQualityUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeEquipmentQualityUp::CopyFrom(const UpgradeEquipmentQualityUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeEquipmentQualityUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpgradeEquipmentQualityUp::Swap(UpgradeEquipmentQualityUp* other) {
  if (other != this) {
    std::swap(herokeyid_, other->herokeyid_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpgradeEquipmentQualityUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpgradeEquipmentQualityUp_descriptor_;
  metadata.reflection = UpgradeEquipmentQualityUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PutonPluginUp::kHeroKeyIdFieldNumber;
const int PutonPluginUp::kPositionFieldNumber;
const int PutonPluginUp::kSlotIdFieldNumber;
const int PutonPluginUp::kPluginIdFieldNumber;
#endif  // !_MSC_VER

PutonPluginUp::PutonPluginUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PutonPluginUp::InitAsDefaultInstance() {
}

PutonPluginUp::PutonPluginUp(const PutonPluginUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PutonPluginUp::SharedCtor() {
  _cached_size_ = 0;
  herokeyid_ = 0u;
  position_ = 0u;
  slotid_ = 0u;
  pluginid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PutonPluginUp::~PutonPluginUp() {
  SharedDtor();
}

void PutonPluginUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PutonPluginUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PutonPluginUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PutonPluginUp_descriptor_;
}

const PutonPluginUp& PutonPluginUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

PutonPluginUp* PutonPluginUp::default_instance_ = NULL;

PutonPluginUp* PutonPluginUp::New() const {
  return new PutonPluginUp;
}

void PutonPluginUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herokeyid_ = 0u;
    position_ = 0u;
    slotid_ = 0u;
    pluginid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PutonPluginUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_slotId;
        break;
      }

      // required uint32 slotId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slotId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotid_)));
          set_has_slotid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pluginId;
        break;
      }

      // required uint32 pluginId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pluginId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pluginid_)));
          set_has_pluginid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PutonPluginUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herokeyid(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // required uint32 slotId = 3;
  if (has_slotid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->slotid(), output);
  }

  // required uint32 pluginId = 4;
  if (has_pluginid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pluginid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PutonPluginUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herokeyid(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // required uint32 slotId = 3;
  if (has_slotid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->slotid(), target);
  }

  // required uint32 pluginId = 4;
  if (has_pluginid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pluginid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PutonPluginUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroKeyId = 1;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 slotId = 3;
    if (has_slotid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotid());
    }

    // required uint32 pluginId = 4;
    if (has_pluginid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pluginid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PutonPluginUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PutonPluginUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PutonPluginUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PutonPluginUp::MergeFrom(const PutonPluginUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_slotid()) {
      set_slotid(from.slotid());
    }
    if (from.has_pluginid()) {
      set_pluginid(from.pluginid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PutonPluginUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PutonPluginUp::CopyFrom(const PutonPluginUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PutonPluginUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void PutonPluginUp::Swap(PutonPluginUp* other) {
  if (other != this) {
    std::swap(herokeyid_, other->herokeyid_);
    std::swap(position_, other->position_);
    std::swap(slotid_, other->slotid_);
    std::swap(pluginid_, other->pluginid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PutonPluginUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PutonPluginUp_descriptor_;
  metadata.reflection = PutonPluginUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DischargePlugUp::kHeroKeyIdFieldNumber;
const int DischargePlugUp::kPositionFieldNumber;
const int DischargePlugUp::kTypeFieldNumber;
#endif  // !_MSC_VER

DischargePlugUp::DischargePlugUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DischargePlugUp::InitAsDefaultInstance() {
}

DischargePlugUp::DischargePlugUp(const DischargePlugUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DischargePlugUp::SharedCtor() {
  _cached_size_ = 0;
  herokeyid_ = 0u;
  position_ = 0u;
  type_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DischargePlugUp::~DischargePlugUp() {
  SharedDtor();
}

void DischargePlugUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DischargePlugUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DischargePlugUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DischargePlugUp_descriptor_;
}

const DischargePlugUp& DischargePlugUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

DischargePlugUp* DischargePlugUp::default_instance_ = NULL;

DischargePlugUp* DischargePlugUp::New() const {
  return new DischargePlugUp;
}

void DischargePlugUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herokeyid_ = 0u;
    position_ = 0u;
    type_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DischargePlugUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heroKeyId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herokeyid_)));
          set_has_herokeyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required uint32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DischargePlugUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herokeyid(), output);
  }

  // required uint32 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->position(), output);
  }

  // required uint32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DischargePlugUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 heroKeyId = 1;
  if (has_herokeyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herokeyid(), target);
  }

  // required uint32 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->position(), target);
  }

  // required uint32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DischargePlugUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heroKeyId = 1;
    if (has_herokeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herokeyid());
    }

    // required uint32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->position());
    }

    // required uint32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DischargePlugUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DischargePlugUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DischargePlugUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DischargePlugUp::MergeFrom(const DischargePlugUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herokeyid()) {
      set_herokeyid(from.herokeyid());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DischargePlugUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DischargePlugUp::CopyFrom(const DischargePlugUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DischargePlugUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void DischargePlugUp::Swap(DischargePlugUp* other) {
  if (other != this) {
    std::swap(herokeyid_, other->herokeyid_);
    std::swap(position_, other->position_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DischargePlugUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DischargePlugUp_descriptor_;
  metadata.reflection = DischargePlugUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefinePlugUp::kPlugIdFieldNumber;
#endif  // !_MSC_VER

RefinePlugUp::RefinePlugUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefinePlugUp::InitAsDefaultInstance() {
}

RefinePlugUp::RefinePlugUp(const RefinePlugUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefinePlugUp::SharedCtor() {
  _cached_size_ = 0;
  plugid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefinePlugUp::~RefinePlugUp() {
  SharedDtor();
}

void RefinePlugUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefinePlugUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefinePlugUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefinePlugUp_descriptor_;
}

const RefinePlugUp& RefinePlugUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

RefinePlugUp* RefinePlugUp::default_instance_ = NULL;

RefinePlugUp* RefinePlugUp::New() const {
  return new RefinePlugUp;
}

void RefinePlugUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plugid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefinePlugUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plugId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugid_)));
          set_has_plugid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefinePlugUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plugId = 1;
  if (has_plugid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plugid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefinePlugUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plugId = 1;
  if (has_plugid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plugid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefinePlugUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plugId = 1;
    if (has_plugid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefinePlugUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefinePlugUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefinePlugUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefinePlugUp::MergeFrom(const RefinePlugUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugid()) {
      set_plugid(from.plugid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefinePlugUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefinePlugUp::CopyFrom(const RefinePlugUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefinePlugUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RefinePlugUp::Swap(RefinePlugUp* other) {
  if (other != this) {
    std::swap(plugid_, other->plugid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefinePlugUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefinePlugUp_descriptor_;
  metadata.reflection = RefinePlugUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RefinePlugDown::kPlugIdFieldNumber;
const int RefinePlugDown::kSuccessFieldNumber;
#endif  // !_MSC_VER

RefinePlugDown::RefinePlugDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RefinePlugDown::InitAsDefaultInstance() {
}

RefinePlugDown::RefinePlugDown(const RefinePlugDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RefinePlugDown::SharedCtor() {
  _cached_size_ = 0;
  plugid_ = 0u;
  success_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RefinePlugDown::~RefinePlugDown() {
  SharedDtor();
}

void RefinePlugDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RefinePlugDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RefinePlugDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RefinePlugDown_descriptor_;
}

const RefinePlugDown& RefinePlugDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100500_5fEquipmentMessage_2eproto();
  return *default_instance_;
}

RefinePlugDown* RefinePlugDown::default_instance_ = NULL;

RefinePlugDown* RefinePlugDown::New() const {
  return new RefinePlugDown;
}

void RefinePlugDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    plugid_ = 0u;
    success_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RefinePlugDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 plugId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &plugid_)));
          set_has_plugid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_success;
        break;
      }

      // required bool success = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_success:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RefinePlugDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 plugId = 1;
  if (has_plugid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->plugid(), output);
  }

  // required bool success = 2;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RefinePlugDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 plugId = 1;
  if (has_plugid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->plugid(), target);
  }

  // required bool success = 2;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RefinePlugDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 plugId = 1;
    if (has_plugid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->plugid());
    }

    // required bool success = 2;
    if (has_success()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RefinePlugDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RefinePlugDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RefinePlugDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RefinePlugDown::MergeFrom(const RefinePlugDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plugid()) {
      set_plugid(from.plugid());
    }
    if (from.has_success()) {
      set_success(from.success());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RefinePlugDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RefinePlugDown::CopyFrom(const RefinePlugDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RefinePlugDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RefinePlugDown::Swap(RefinePlugDown* other) {
  if (other != this) {
    std::swap(plugid_, other->plugid_);
    std::swap(success_, other->success_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RefinePlugDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RefinePlugDown_descriptor_;
  metadata.reflection = RefinePlugDown_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
