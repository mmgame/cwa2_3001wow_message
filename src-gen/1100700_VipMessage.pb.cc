// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: 1100700_VipMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "1100700_VipMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* GetVipinfoUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVipinfoUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetVipinfoDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetVipinfoDown_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* VipCommondIdEnum_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_1100700_5fVipMessage_2eproto() {
  protobuf_AddDesc_1100700_5fVipMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "1100700_VipMessage.proto");
  GOOGLE_CHECK(file != NULL);
  GetVipinfoUp_descriptor_ = file->message_type(0);
  static const int GetVipinfoUp_offsets_[1] = {
  };
  GetVipinfoUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetVipinfoUp_descriptor_,
      GetVipinfoUp::default_instance_,
      GetVipinfoUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetVipinfoUp));
  GetVipinfoDown_descriptor_ = file->message_type(1);
  static const int GetVipinfoDown_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoDown, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoDown, experience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoDown, awardstate_),
  };
  GetVipinfoDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetVipinfoDown_descriptor_,
      GetVipinfoDown::default_instance_,
      GetVipinfoDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetVipinfoDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetVipinfoDown));
  VipCommondIdEnum_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_1100700_5fVipMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetVipinfoUp_descriptor_, &GetVipinfoUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetVipinfoDown_descriptor_, &GetVipinfoDown::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_1100700_5fVipMessage_2eproto() {
  delete GetVipinfoUp::default_instance_;
  delete GetVipinfoUp_reflection_;
  delete GetVipinfoDown::default_instance_;
  delete GetVipinfoDown_reflection_;
}

void protobuf_AddDesc_1100700_5fVipMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\0301100700_VipMessage.proto\"\016\n\014GetVipinfo"
    "Up\"G\n\016GetVipinfoDown\022\r\n\005level\030\001 \002(\r\022\022\n\ne"
    "xperience\030\002 \002(\r\022\022\n\nawardState\030\003 \002(\r*>\n\020V"
    "ipCommondIdEnum\022\023\n\r_GetVipinfoUp\020\235\227C\022\025\n\017"
    "_GetVipinfoDown\020\236\227CB\035\n\017com.cwa.messageB\n"
    "VipMessage", 210);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "1100700_VipMessage.proto", &protobuf_RegisterTypes);
  GetVipinfoUp::default_instance_ = new GetVipinfoUp();
  GetVipinfoDown::default_instance_ = new GetVipinfoDown();
  GetVipinfoUp::default_instance_->InitAsDefaultInstance();
  GetVipinfoDown::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_1100700_5fVipMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_1100700_5fVipMessage_2eproto {
  StaticDescriptorInitializer_1100700_5fVipMessage_2eproto() {
    protobuf_AddDesc_1100700_5fVipMessage_2eproto();
  }
} static_descriptor_initializer_1100700_5fVipMessage_2eproto_;
const ::google::protobuf::EnumDescriptor* VipCommondIdEnum_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipCommondIdEnum_descriptor_;
}
bool VipCommondIdEnum_IsValid(int value) {
  switch(value) {
    case 1100701:
    case 1100702:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

GetVipinfoUp::GetVipinfoUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetVipinfoUp::InitAsDefaultInstance() {
}

GetVipinfoUp::GetVipinfoUp(const GetVipinfoUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetVipinfoUp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetVipinfoUp::~GetVipinfoUp() {
  SharedDtor();
}

void GetVipinfoUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetVipinfoUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVipinfoUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVipinfoUp_descriptor_;
}

const GetVipinfoUp& GetVipinfoUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100700_5fVipMessage_2eproto();
  return *default_instance_;
}

GetVipinfoUp* GetVipinfoUp::default_instance_ = NULL;

GetVipinfoUp* GetVipinfoUp::New() const {
  return new GetVipinfoUp;
}

void GetVipinfoUp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetVipinfoUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void GetVipinfoUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetVipinfoUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetVipinfoUp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVipinfoUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetVipinfoUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetVipinfoUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetVipinfoUp::MergeFrom(const GetVipinfoUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetVipinfoUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVipinfoUp::CopyFrom(const GetVipinfoUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVipinfoUp::IsInitialized() const {

  return true;
}

void GetVipinfoUp::Swap(GetVipinfoUp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetVipinfoUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVipinfoUp_descriptor_;
  metadata.reflection = GetVipinfoUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetVipinfoDown::kLevelFieldNumber;
const int GetVipinfoDown::kExperienceFieldNumber;
const int GetVipinfoDown::kAwardStateFieldNumber;
#endif  // !_MSC_VER

GetVipinfoDown::GetVipinfoDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetVipinfoDown::InitAsDefaultInstance() {
}

GetVipinfoDown::GetVipinfoDown(const GetVipinfoDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetVipinfoDown::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0u;
  experience_ = 0u;
  awardstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetVipinfoDown::~GetVipinfoDown() {
  SharedDtor();
}

void GetVipinfoDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetVipinfoDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetVipinfoDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetVipinfoDown_descriptor_;
}

const GetVipinfoDown& GetVipinfoDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_1100700_5fVipMessage_2eproto();
  return *default_instance_;
}

GetVipinfoDown* GetVipinfoDown::default_instance_ = NULL;

GetVipinfoDown* GetVipinfoDown::New() const {
  return new GetVipinfoDown;
}

void GetVipinfoDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0u;
    experience_ = 0u;
    awardstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetVipinfoDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_experience;
        break;
      }

      // required uint32 experience = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_experience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &experience_)));
          set_has_experience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardState;
        break;
      }

      // required uint32 awardState = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &awardstate_)));
          set_has_awardstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetVipinfoDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->level(), output);
  }

  // required uint32 experience = 2;
  if (has_experience()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->experience(), output);
  }

  // required uint32 awardState = 3;
  if (has_awardstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->awardstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetVipinfoDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->level(), target);
  }

  // required uint32 experience = 2;
  if (has_experience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->experience(), target);
  }

  // required uint32 awardState = 3;
  if (has_awardstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->awardstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetVipinfoDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // required uint32 experience = 2;
    if (has_experience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->experience());
    }

    // required uint32 awardState = 3;
    if (has_awardstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->awardstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetVipinfoDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetVipinfoDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetVipinfoDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetVipinfoDown::MergeFrom(const GetVipinfoDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_experience()) {
      set_experience(from.experience());
    }
    if (from.has_awardstate()) {
      set_awardstate(from.awardstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetVipinfoDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetVipinfoDown::CopyFrom(const GetVipinfoDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetVipinfoDown::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GetVipinfoDown::Swap(GetVipinfoDown* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(experience_, other->experience_);
    std::swap(awardstate_, other->awardstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetVipinfoDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetVipinfoDown_descriptor_;
  metadata.reflection = GetVipinfoDown_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
